{"version":3,"sources":["obfuscator/beginning.js","cli.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","cli/Api.js","cli/ProgramsGenerator.js","cli/StudentApi.js","cli/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","Commander","version","option","parse","process","argv","password","privateKey","console","log","exit","rl","readline","createInterface","input","stdin","output","stdout","prefix","onResult","commandName","resp","isError","util","inspect","setPrompt","length","prompt","Api","getPrograms","url","login","then","programs","callCommand","inputStr","params","pArgs","concat","_toConsumableArray","processed","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","program","value","name","e","return","Command","action","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","outputHelp","close","on","line","trim","catch","error","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_bitsharesjs","_Configs","_requestPromise","accountName","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","nodeUrl","api","Promise","resolved","rejected","BlockchainApi","init","Login","generateKeys","setPrivateKey","reject","keys","_requestPromise2","default","method","utSchoolFaucetAddress","body","active_key","pubKeys","active","memo_key","memo","owner_key","owner","referrer","utSchoolFaucet","json","_bitsharesjsWs","object_type","ChainTypes","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","get","operations","operation","op","_fetchHistory","id","opTypeName","account_id","ChainValidation","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","init_promise","res","all","TransactionBuilder","update_head_block","network_name","_BitsharesApiExtends","_assert","feeAsset","lectureAccount","_assert2","FetchChain","utSchoolTokenTicket","_res","_slicedToArray","cLectureAccount","cStudentAccount","sendAsset","tr","add_type_operation","fee","amount","asset_id","from","to","set_required_fees","propose","fee_paying_account","add_signer","toPublicKey","toPublicKeyString","broadcast","serialize","_this2","schoolTokens","utSchoolTokenSession","utSchoolTokenGrade","_res2","studentAccount","assets","lectureAccountId","studentAccountId","ticketTockenId","proposals","assetsMap","asset","symbol","accepted","requested","balance","getAccountBalance","fetchHistory","transferData","cProposals","index","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","cProposal","Date","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","operationData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","cUtSchoolAccount","cUtSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectures","teachersIds","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lectureData","teacher","account_auths","teachers","teachersMap","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","lectureStatePromiseList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","lecture","teacherData","getLectureStats","lecturesStates","stats","educationToken","cEducationToken","cFeeAsset","_sendToken","tokens","cLectureAccountId","statsMap","tokensIds","map","token","cTicketTokenId","lectureParticipantsIds","indexOf","transferTokenId","accounts","accountsMap","lectureParticipants","accountData","cTicketToken","applications","accountIds","accountId","application","lectureApplicationId","_res4","cTeacherAccount","proposal","active_approvals_to_add","getLectureParticipants","getLectureApplications","onFinish","_res5","participants","__processLectureQueue","_this4","_res6","cUtSchoolToken","lecturesIdsList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","teachersLecturesList","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","potentialTeacherIds","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_ProgramsGenerator","SchoolApi","privKeys","generatePrograms","command","description","options","key","required","_commander","programsList","_loop","programData","Program","apiArgs","optionValue","apply","privateKeyWif","PrivateKey","fromWif"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\r\n * Created by superpchelka on 24.02.18.\r\n */\r\n\r\nimport Api from './cli/Api';\r\nimport Commander from 'commander';\r\nimport readline from 'readline';\r\nimport util from \"util\";\r\n\r\n\r\nCommander\r\n    .version('1.0.0')\r\n    .option('-l, --login <login>', 'login of your bitshares account')\r\n    .option('-p, --password  [password]', 'password of your bitshares account')\r\n    .option('-k, --privateKey [privateKey]', 'private key of your bitshares account')\r\n    .option('-u, --url <nodeUrl>', 'url of node to connect')\r\n    .parse(process.argv);\r\n\r\nif(!Commander.password && !Commander.privateKey) {\r\n    console.log(\"Error: you must provide password or privateKey for accessing to your bitshares account\");\r\n    process.exit();\r\n}\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\nconst prefix = '>';\r\nlet onResult = (commandName, resp, isError)=>{\r\n    console.log(util.inspect(resp, false, null));\r\n    rl.setPrompt(prefix, prefix.length);\r\n    rl.prompt();\r\n};\r\n\r\nApi.getPrograms(Commander.url, Commander.login, Commander.password, Commander.privateKey, onResult).then((programs)=>{\r\n\r\n    programs.push(\r\n        new Commander.Command('help')\r\n            .action((commandName)=>{\r\n                if(commandName !== 'help')\r\n                    return;\r\n                for(let program of programs) {\r\n                    program.outputHelp();\r\n                    console.log(\"\\n--------------------------\\n\");\r\n                }\r\n                onResult(commandName, '', false);\r\n            })\r\n    );\r\n\r\n    programs.push(\r\n        new Commander.Command('exit')\r\n            .action((commandName)=>{\r\n                if(commandName !== 'exit')\r\n                    return;\r\n                rl.close();\r\n            })\r\n    );\r\n\r\n    function callCommand(programs, inputStr) {\r\n        let params = inputStr.split(' ');\r\n        let commandName = params[0];\r\n        let pArgs = ['', '', ...params];\r\n\r\n        let processed = false;\r\n\r\n        for(let program of programs) {\r\n            try{\r\n                if(commandName===program.name())\r\n                    processed = true;\r\n                program.parse(pArgs);\r\n            }catch(e){\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        if(!processed)\r\n            onResult(null, `Unknown command ${commandName}`, true)\r\n    }\r\n\r\n    rl.on('line', (line)=>{\r\n        callCommand(programs, line.trim());\r\n    }).on('close', ()=>{\r\n        process.exit(0);\r\n    });\r\n\r\n    rl.setPrompt(prefix, prefix.length);\r\n    rl.prompt();\r\n}).catch((error)=>{console.log(error)});\r\n\r\n\r\n\r\n","/**\r\n * Created by superpchelka on 24.02.18.\r\n */\r\n\r\nimport {Api} from './api/Api'\r\n\r\nexport default Api;","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\n\r\nimport {Account} from '../common/Account'\r\nimport {StudentApi} from \"./StudentApi\";\r\nimport {TeacherApi} from \"./TeacherApi\";\r\nimport {BlockchainApi} from \"./BlockchainApi\"\r\nimport {Login} from \"bitsharesjs\";\r\nimport {utSchoolFaucetAddress, utSchoolFaucet} from \"../common/Configs\";\r\nimport Request from \"request-promise\";\r\n\r\n\r\nclass Api{\r\n\r\n\r\n    /**\r\n     * @desc initialize api for interacting with blockchain\r\n     * @param nodeUrl - url of node for connection\r\n     * @param accountName - name of bitshares account\r\n     * @param [privateKey] - private of bitshares account (optional)\r\n     * @return api object\r\n     */\r\n    static init(nodeUrl, accountName, privateKey){\r\n        let api = new Api(accountName, privateKey);\r\n        return new Promise((resolved, rejected)=>{\r\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @desc generate public keys and private keys by login and password\r\n     * @param login - login of the bitshares account\r\n     * @param password - password of the bitshares account\r\n     * @return Object{\r\n     *      pubKeys: {active, owner, memo},\r\n     *      privKeys: {active, owner, memo}\r\n     * }\r\n     */\r\n    static generateKeys(login, password){\r\n        return Login.generateKeys(login, password)\r\n    }\r\n\r\n    constructor(accountName, privateKey){\r\n        this.account = new Account(accountName, privateKey);\r\n        this.studentApi=new StudentApi(this.account);\r\n        this.teacherApi=new TeacherApi(this.account);\r\n    }\r\n\r\n    /**\r\n     * @desc set private key of current user\r\n     * @param privateKey - private key\r\n     */\r\n    setPrivateKey(privateKey){\r\n        this.account.setPrivateKey(privateKey);\r\n    }\r\n\r\n    /**\r\n     * @desc register user by login, password\r\n     * @param login - name of the new bitshares account\r\n     * @param password - password for generating bitshares keys\r\n     * @return information about created account\r\n     */\r\n    register(\r\n        login,\r\n        password,\r\n    ) {\r\n        return new Promise((resolve, reject) => {\r\n            let keys = Api.generateKeys(login, password);\r\n\r\n            Request(\r\n                {\r\n                    method: \"POST\",\r\n                    url: utSchoolFaucetAddress,\r\n                    body: {\r\n                        account: {\r\n                            active_key: keys.pubKeys.active,\r\n                            memo_key: keys.pubKeys.memo,\r\n                            owner_key: keys.pubKeys.owner,\r\n                            name: login,\r\n                            referrer: utSchoolFaucet\r\n                        }\r\n                    },\r\n                    json: true\r\n                }\r\n            ).then((resp)=>{\r\n                resolve(resp);\r\n            }).catch(function (err) {\r\n                reject(`Faucet ${utSchoolFaucetAddress} failed. ${err}`);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport {Api}","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\n\r\nimport {Apis} from \"bitsharesjs-ws\";\r\nimport {ChainValidation} from \"bitsharesjs\";\r\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\r\nconst {object_type} = ChainTypes;\r\nlet op_history   = parseInt(object_type.operation_history, 10);\r\n\r\n\r\nclass BitsharesApiExtends{\r\n\r\n\r\n    /**\r\n     * @desc internal method for iterating through all operations history\r\n     * @param account - id of the bitshares account\r\n     * @param limit - results per butch (max 100)\r\n     * @param opType - operation type id for filtering\r\n     * @param stop - recent operation id\r\n     * @param start - first operation id\r\n     * @param operationsList - list of already fetched operations\r\n     * @return list of operations like FetchRecentHistory from bitsharesjs\r\n     * @private\r\n     */\r\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\r\n        if(typeof stop === 'undefined')\r\n            stop = \"1.\" + op_history + \".0\";\r\n        if(typeof start === 'undefined')\r\n            start = \"1.\" + op_history + \".0\";\r\n\r\n        return new Promise( (resolve, reject) => {\r\n            Apis.instance().history_api().exec(\"get_account_history\",\r\n                [ account.get(\"id\"), stop, limit, start])\r\n                .then( operations => {\r\n                    for(let operation of operations) {\r\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\r\n                            operationsList.push(operation);\r\n                    }\r\n\r\n                    if(operations.length == limit)\r\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\r\n                    else\r\n                        resolve(operationsList);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @desc collect all history of the account\r\n     * @param account - id of the bitshares account\r\n     * @param limit - results per butch (max 100)\r\n     * @param opTypeName - operation type for filtering\r\n     * @param stop - recent operation id\r\n     * @param start - first operation id\r\n     * @return list of operations like FetchRecentHistory from bitsharesjs\r\n     */\r\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\r\n    {\r\n        // console.log( \"get account history: \", account )\r\n        /// TODO: make sure we do not submit a query if there is already one\r\n        /// in flight...\r\n        let account_id = account;\r\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\r\n            account_id = account.get(\"id\");\r\n\r\n        if( !ChainValidation.is_object_id(account_id)  )\r\n            return;\r\n\r\n        account = ChainStore.objects_by_id.get(account_id);\r\n        if( !account ) return;\r\n\r\n        let opTypeId = ChainTypes.operations[opTypeName];\r\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\r\n            throw new Error(`unknown operation: ${opTypeName}`);\r\n\r\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport {BitsharesApiExtends}","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\n\r\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\r\nimport {Apis} from \"bitsharesjs-ws\";\r\n\r\nclass BlockchainApi{\r\n\r\n    static init(nodeUrl){\r\n        return new Promise((resolved, rejected) => {\r\n            Apis.instance(nodeUrl, true)\r\n                .init_promise.then((res) => {\r\n                Promise.all([\r\n                    new TransactionBuilder().update_head_block(),\r\n                    ChainStore.init()\r\n                ]).then(()=>{\r\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\r\n                    resolved();\r\n                }).catch(rejected);\r\n            }).catch(rejected);\r\n        });\r\n    }\r\n}\r\n\r\nexport {BlockchainApi}","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\r\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\r\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\r\nimport assert from \"assert\";\r\n\r\n\r\n\r\nclass StudentApi{\r\n\r\n    constructor(account){\r\n        this.account=account;\r\n        this.feeAsset='BTS';\r\n    }\r\n\r\n    /**\r\n     * @desc apply current user for the lecture\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @return serialized transaction\r\n     */\r\n    applyForLecture(lectureAccount){\r\n        return new Promise((resolve, reject) => {\r\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\r\n\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", lectureAccount),\r\n                FetchChain(\"getAccount\", this.account.name),\r\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\r\n                FetchChain(\"getAsset\", this.feeAsset)\r\n            ]).then((res)=> {\r\n                let [cLectureAccount, cStudentAccount, sendAsset, feeAsset] = res;\r\n\r\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\r\n                assert(cStudentAccount !== null, `Invalid student account ${this.account.name}`);\r\n                assert(sendAsset !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\r\n                assert(feeAsset !== null, `Invalid fee asset name ${this.feeAsset}`);\r\n\r\n                let tr = new TransactionBuilder();\r\n                tr.add_type_operation(\"transfer\", {\r\n                    fee: {\r\n                        amount: 0,\r\n                        asset_id: feeAsset.get(\"id\")\r\n                    },\r\n                    from: cLectureAccount.get(\"id\"),\r\n                    to: cStudentAccount.get(\"id\"),\r\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\r\n                });\r\n\r\n                tr.set_required_fees().then(()=>{\r\n                    tr.propose({\r\n                        fee_paying_account: cStudentAccount.get(\"id\"),\r\n                    });\r\n\r\n                    tr.set_required_fees().then(() => {\r\n                        tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\r\n                        tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n\r\n\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @desc collect information about lecture\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\r\n     * stat: {\r\n     *      id - id of the token,\r\n     *      symbol - name of the token\r\n     *      accepted - use was accepted to lecture\r\n     *      balance - balance of the particular token on the account\r\n     * }\r\n     */\r\n    getLectureStats(lectureAccount){\r\n        return new Promise((resolve, reject) => {\r\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", lectureAccount),\r\n                FetchChain(\"getAccount\", this.account.name),\r\n                FetchChain(\"getAsset\", schoolTokens)\r\n            ]).then((res)=> {\r\n                let [cLectureAccount, studentAccount, assets] = res;\r\n                assets = assets.toJS();\r\n\r\n                assert(cLectureAccount !== null, `Invalid lecture account ${cLectureAccount}`);\r\n                assert(studentAccount !== null, `Invalid student account ${this.account.name}`);\r\n                assert(assets[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\r\n                assert(assets[1] !== null, `Invalid session token ${schoolTokens[1]}`);\r\n                assert(assets[2] !== null, `Invalid grade token ${schoolTokens[2]}`);\r\n\r\n\r\n                let lectureAccountId = cLectureAccount.get('id');\r\n                let studentAccountId = studentAccount.get('id');\r\n                let ticketTockenId = assets[0].id;\r\n                let proposals = cLectureAccount.get('proposals').toJS();\r\n\r\n                let assetsMap = {};\r\n                for(let asset of assets)\r\n                    assetsMap[asset.id] = {\r\n                        'id': asset.id,\r\n                        'symbol': asset.symbol,\r\n                        'accepted': false,\r\n                        'requested': false,\r\n                        'balance': ChainStore.getAccountBalance(cLectureAccount, asset.id)\r\n                    };\r\n\r\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\r\n                    for(let operation of operations){\r\n                        let transferData=operation.op[1];\r\n                        if(transferData.from === lectureAccountId\r\n                            && transferData.to === studentAccountId\r\n                            && assetsMap[transferData.amount.asset_id]){\r\n                            assetsMap[transferData.amount.asset_id].accepted = true;\r\n                        }\r\n                    }\r\n\r\n                    FetchChain(\"getObject\", proposals).then((cProposals)=> {\r\n                        cProposals = cProposals.toJS();\r\n\r\n                        let index = -1;\r\n                        for (let cProposal of cProposals) {\r\n                            index++;\r\n                            if(!cProposal){\r\n                                console.log(`Have no information about proposal ${proposals[index]}`);\r\n                                continue;\r\n                            }\r\n\r\n                            if(Date.parse(cProposal.proposed_transaction.expiration) < new Date()/1000)\r\n                                continue;\r\n\r\n                            let operations = cProposal.proposed_transaction.operations;\r\n                            let acceptedOperation;\r\n                            for(let operation of operations){\r\n                                let operationData = operation[1];\r\n                                if(!operationData.amount || !operationData.from)\r\n                                    continue;\r\n\r\n                                if(operationData.amount.asset_id === ticketTockenId\r\n                                    && operationData.from === lectureAccountId\r\n                                    && operationData.to === studentAccountId\r\n                                ) {\r\n                                    acceptedOperation = operationData;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if(acceptedOperation){\r\n                                assetsMap[ticketTockenId].requested = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        resolve(assetsMap);\r\n                    }).catch(reject)\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @desc return all available lectures for current user\r\n     * @return list of lectures\r\n     * lecture: {\r\n     *      id - id of the bitshares lecture account\r\n     *      name - name of the bitshares lecture account\r\n     *      teacher: {\r\n     *          id - id of the bitshares teacher account\r\n     *          name - id of the bitshares teacher account\r\n     *      }\r\n     *      stats - result from getLectureStats\r\n     * }\r\n     */\r\n    getLectures(){\r\n        let lecturesList = [];\r\n        return new Promise( (resolve, reject) => {\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", utSchoolAccount),\r\n                FetchChain(\"getAsset\", utSchoolToken)\r\n            ]).then((res)=> {\r\n                let [cUtSchoolAccount, cUtSchoolAsset] = res;\r\n\r\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\r\n                assert(cUtSchoolAsset !== null, `Invalid utSchoolToken ${utSchoolToken}`);\r\n\r\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\r\n                cUtSchoolAsset = cUtSchoolAsset.get('id');\r\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\r\n                    let lecturesAccountsList = [];\r\n                    for(let operation of operations){\r\n                        let transferData=operation.op[1];\r\n\r\n                        if(transferData.from === cUtSchoolAccount\r\n                            && transferData.amount.asset_id === cUtSchoolAsset){\r\n                            lecturesAccountsList.push(transferData.to);\r\n                        }\r\n                    }\r\n\r\n                    if(lecturesAccountsList.length === 0) {\r\n                        resolve(lecturesList);\r\n                        return;\r\n                    }\r\n\r\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\r\n                        lectures = lectures.toJS();\r\n                        let teachersIds = [];\r\n                        let index = -1;\r\n                        for(let lectureData of lectures){\r\n                            index++;\r\n                            if(!lectureData){\r\n                                console.log(`Have no information about lecture with id ${lecturesAccountsList[index]}`);\r\n                                continue;\r\n                            }\r\n                            lecturesList.push({\r\n                                'id': lectureData.id,\r\n                                'name': lectureData.name,\r\n                                'teacher': {\r\n                                    'id': lectureData.active.account_auths[0][0]\r\n                                }\r\n                            });\r\n\r\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\r\n                        }\r\n\r\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\r\n                            let teachersMap = {};\r\n                            let index = -1;\r\n                            teachers = teachers.toJS();\r\n                            for(let teacher of teachers) {\r\n                                index++;\r\n                                if(!teacher){\r\n                                    console.log(`Have no information about teacher with id ${teachersIds[index]}`);\r\n                                    continue;\r\n                                }\r\n                                teachersMap[teacher.id] = teacher;\r\n                            }\r\n\r\n                            let lectureStatePromiseList = [];\r\n                            for(let lecture of lecturesList) {\r\n                                let teacherData = teachersMap[lecture.teacher.id];\r\n                                if(teacherData)\r\n                                    lecture.teacher.name = teacherData.name;\r\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\r\n                            }\r\n\r\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\r\n                                for(let i=0;i<lecturesList.length;i++)\r\n                                    lecturesList[i].stats = lecturesStates[i];\r\n\r\n                                resolve(lecturesList);\r\n                            }).catch(reject);\r\n                        }).catch(reject);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n\r\n}\r\n\r\nexport {StudentApi}","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\r\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\r\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\r\nimport assert from \"assert\";\r\n\r\nclass TeacherApi{\r\n\r\n    constructor(account){\r\n        this.account=account;\r\n        this.feeAsset='BTS';\r\n    }\r\n\r\n    /**\r\n     * @desc send education token from lecture account to particular student\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @param studentAccount - name of the bitshares student account\r\n     * @param educationToken - name of the bitshares education token\r\n     * @return serialized transaction\r\n     */\r\n    _sendToken(lectureAccount, studentAccount, educationToken){\r\n        return new Promise((resolve, reject)=>{\r\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\r\n\r\n\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", lectureAccount),\r\n                FetchChain(\"getAccount\", studentAccount),\r\n                FetchChain(\"getAsset\", educationToken),\r\n                FetchChain(\"getAsset\", this.feeAsset)\r\n            ]).then((res)=> {\r\n                let [cLectureAccount, cStudentAccount, cEducationToken, cFeeAsset] = res;\r\n\r\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\r\n                assert(cStudentAccount !== null, `Invalid student account ${studentAccount}`);\r\n                assert(cEducationToken !== null, `Invalid education token ${educationToken}`);\r\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\r\n\r\n                let tr = new TransactionBuilder();\r\n\r\n                tr.add_type_operation(\"transfer\", {\r\n                    fee: {\r\n                        amount: 0,\r\n                        asset_id: cFeeAsset.get(\"id\")\r\n                    },\r\n                    from: cLectureAccount.get(\"id\"),\r\n                    to: cStudentAccount.get(\"id\"),\r\n                    amount: { asset_id: cEducationToken.get(\"id\"), amount: 1},\r\n                } );\r\n\r\n                tr.set_required_fees().then(() => {\r\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\r\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @desc send session token from lecture account to particular student\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @param studentAccount - name of the bitshares student account\r\n     * @return serialized transaction\r\n     */\r\n    sendSessionToken(lectureAccount, studentAccount){\r\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\r\n    }\r\n\r\n    /**\r\n     * @desc send grade token from lecture account to particular student\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @param studentAccount - name of the bitshares student account\r\n     * @return serialized transaction\r\n     */\r\n    sendGradeToken(lectureAccount, studentAccount){\r\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\r\n    }\r\n\r\n    /**\r\n     * @desc fetch from blockchain information about participants of the lecture\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @return list of participants\r\n     * participant: {\r\n     *      id,\r\n     *      name\r\n     * }\r\n     */\r\n    getLectureParticipants(lectureAccount){\r\n        return new Promise( (resolve, reject) => {\r\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", lectureAccount),\r\n                FetchChain(\"getAsset\", schoolTokens),\r\n            ]).then((res)=> {\r\n                let [cLectureAccount, tokens] = res;\r\n                tokens = tokens.toJS();\r\n\r\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\r\n                assert(tokens[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\r\n                assert(tokens[1] !== null, `Invalid session token ${schoolTokens[1]}`);\r\n                assert(tokens[2]!== null, `Invalid grade token ${schoolTokens[2]}`);\r\n\r\n                let cLectureAccountId = cLectureAccount.get('id');\r\n                let statsMap = {};\r\n                let tokensIds = tokens.map(token=>token.id);\r\n                let cTicketTokenId = tokens[0].id;\r\n\r\n                BitsharesApiExtends.fetchHistory(cLectureAccountId, 100, 'transfer').then((operations)=>{\r\n                    let lectureParticipantsIds = [];\r\n                    for(let operation of operations){\r\n                        let transferData=operation.op[1];\r\n                        if(transferData.from === cLectureAccountId) {\r\n\r\n                            let index = tokensIds.indexOf(transferData.amount.asset_id);\r\n                            if (index === -1)\r\n                                continue;\r\n\r\n                            let transferTokenId = transferData.amount.asset_id;\r\n\r\n                            if (transferTokenId === cTicketTokenId)\r\n                                lectureParticipantsIds.push(transferData.to);\r\n\r\n                            if (tokensIds.indexOf(transferTokenId) !== -1) {\r\n                                let stats = statsMap[transferData.to];\r\n                                if (!stats) {\r\n                                    statsMap[transferData.to] = stats = {};\r\n                                    for(let token of tokens){\r\n                                        stats[token.id] = {\r\n                                            'id': token.id,\r\n                                            'symbol': token.symbol,\r\n                                            'accepted': false\r\n                                        }\r\n                                    }\r\n                                }\r\n                                stats[transferTokenId]['accepted'] = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\r\n                        accounts = accounts.toJS();\r\n                        let accountsMap = {};\r\n\r\n                        let index = -1;\r\n                        for(let account of accounts){\r\n                            index++;\r\n                            if(!account){\r\n                                console.log(`Have no information about account ${lectureParticipants[index]}`);\r\n                                continue;\r\n                            }\r\n                            accountsMap[account.id] = account;\r\n                        }\r\n\r\n                        let lectureParticipants = [];\r\n                        for(let participant of lectureParticipantsIds){\r\n                            let accountData = accountsMap[participant];\r\n                            if(!accountData)\r\n                                continue;\r\n                            lectureParticipants.push({\r\n                                'id': accountData.id,\r\n                                'name': accountData.name,\r\n                                'stats': statsMap[accountData.id]\r\n                            });\r\n                        }\r\n\r\n                        resolve(lectureParticipants);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @desc fetch from blockchain information about applications for the lecture\r\n     * @param lectureAccount - name of the bitshares lecture account\r\n     * @return list of applications\r\n     * application: {\r\n     *      id, - id of proposal\r\n     *      account: { - information about student account requested application\r\n     *          id,\r\n     *          name\r\n     *      }\r\n     * }\r\n     */\r\n    getLectureApplications(lectureAccount){\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", lectureAccount),\r\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\r\n            ]).then((res)=> {\r\n                let [cLectureAccount, cTicketToken] = res;\r\n\r\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\r\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\r\n\r\n                let lectureAccountId = cLectureAccount.get('id');\r\n                cTicketToken = cTicketToken.get('id');\r\n\r\n                let proposals = cLectureAccount.toJS().proposals;\r\n                if(proposals.length === 0){\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n\r\n                let applications = [];\r\n                FetchChain(\"getObject\", proposals).then((cProposals)=>{\r\n                    cProposals = cProposals.toJS();\r\n\r\n                    let accountIds = [];\r\n                    let index = -1;\r\n                    for(let cProposal of cProposals){\r\n                        index++;\r\n                        if(!cProposal){\r\n                            console.log(`Have no information about proposal ${proposals[index]}`);\r\n                            continue;\r\n                        }\r\n\r\n                        if(Date.parse(cProposal.proposed_transaction.expiration) < new Date()/1000)\r\n                            continue;\r\n                        let operations = cProposal.proposed_transaction.operations;\r\n                        let acceptedOperation;\r\n                        for(let operation of operations){\r\n                            let operationData = operation[1];\r\n                            if(!operationData.amount || !operationData.from)\r\n                                continue;\r\n\r\n                            if(operationData.amount.asset_id === cTicketToken\r\n                                && operationData.from === lectureAccountId\r\n                            ) {\r\n                                acceptedOperation = operationData;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if(!acceptedOperation)\r\n                            continue;\r\n\r\n                        accountIds.push(acceptedOperation.to);\r\n                        applications.push({\r\n                            'id': cProposal.id,\r\n                            'operation': acceptedOperation\r\n                        });\r\n                    }\r\n\r\n                    if(applications.length === 0){\r\n                        resolve([]);\r\n                        return;\r\n                    }\r\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\r\n                        accounts = accounts.toJS();\r\n                        let accountsMap = {};\r\n\r\n                        let index = -1;\r\n                        for(let account of accounts){\r\n                            index++;\r\n                            let accountId=accountIds[index];\r\n                            if(!account){\r\n                                console.log(`Have no information about account ${accountId}`);\r\n                                account = {id: accountId};\r\n                            }\r\n                            accountsMap[accountId] = account;\r\n                        }\r\n\r\n                        for(let application of applications){\r\n                            let accountData = accountsMap[application.operation.to];\r\n                            delete application.operation;\r\n                            application.account = {\r\n                                'id': accountData.id,\r\n                                'name': accountData.name\r\n                            };\r\n                        }\r\n\r\n                        resolve(applications);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @desc accept proposal for application for the lecture\r\n     * @param lectureApplicationId - id of the proposal for application for the lecture\r\n     * @return serialized transaction\r\n     */\r\n    acceptApplication(lectureApplicationId){\r\n        return new Promise((resolve, reject)=>{\r\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\r\n\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", this.account.name),\r\n                FetchChain(\"getAsset\", this.feeAsset),\r\n            ]).then((res)=> {\r\n                let [cTeacherAccount, cFeeAsset, cProposal] = res;\r\n\r\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\r\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\r\n\r\n                let tr = new TransactionBuilder();\r\n\r\n                tr.add_type_operation(\"proposal_update\", {\r\n                    fee: {\r\n                        amount: 0,\r\n                        asset_id: cFeeAsset.get(\"id\")\r\n                    },\r\n                    fee_paying_account: cTeacherAccount.get('id'),\r\n                    proposal: lectureApplicationId,\r\n                    active_approvals_to_add: [cTeacherAccount.get('id')],\r\n                } );\r\n\r\n                tr.set_required_fees().then(() => {\r\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\r\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @desc return statistics about particular lecture\r\n     * @param lectureAccount - name of the bitshares lecture accout\r\n     * @return pair of results from getLectureParticipants and getLectureApplications\r\n     */\r\n    getLectureStats(lectureAccount){\r\n        return Promise.all([\r\n            this.getLectureParticipants(lectureAccount),\r\n            this.getLectureApplications(lectureAccount)\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * @desc internal method for iterating through lectures and gathering stats\r\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\r\n     * @param index - current index in list\r\n     * @param onFinish - finish callback\r\n     * @private\r\n     */\r\n    __processLectureQueue(lectures, index, onFinish){\r\n        if(index>=lectures.length) {\r\n            onFinish(lectures);\r\n            return;\r\n        }\r\n        this.getLectureStats(lectures[index].name).then((res)=>{\r\n            let [participants, applications] = res;\r\n            lectures[index].participants = participants;\r\n            lectures[index].applications = applications;\r\n\r\n            this.__processLectureQueue(lectures, index+1, onFinish);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @desc collect all lectures of the current user\r\n     * @return list of lectures\r\n     * lecture: {\r\n     *      id,\r\n     *      name,\r\n     *      participants - result of getLectureParticipants\r\n     *      applications - result of getLectureApplications\r\n     * }\r\n     */\r\n    getLectures(){\r\n        return new Promise( (resolve, reject) => {\r\n            Promise.all([\r\n                FetchChain(\"getAccount\", utSchoolAccount),\r\n                FetchChain(\"getAccount\", this.account.name),\r\n                FetchChain(\"getAsset\", utSchoolToken)\r\n            ]).then((res)=> {\r\n                let [cUtSchoolAccount, cTeacherAccount, cUtSchoolToken] = res;\r\n\r\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\r\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\r\n                assert(cUtSchoolToken !== null, `Invalid utSchoolToken ${utSchoolToken}`);\r\n\r\n\r\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\r\n                cTeacherAccount = cTeacherAccount.get('id');\r\n                cUtSchoolToken = cUtSchoolToken.get('id');\r\n\r\n\r\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\r\n                    let lecturesIdsList = [];\r\n                    for(let operation of operations){\r\n                        let transferData=operation.op[1];\r\n                        if(transferData.from === cUtSchoolAccount\r\n                            && transferData.amount.asset_id === cUtSchoolToken)\r\n                            lecturesIdsList.push(transferData.to);\r\n                    }\r\n\r\n                    if(lecturesIdsList.length === 0){\r\n                        resolve([]);\r\n                        return;\r\n                    }\r\n\r\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\r\n                        lectures = lectures.toJS();\r\n\r\n                        let teachersLecturesList = [];\r\n\r\n                        let index = -1;\r\n                        for(let lecture of lectures)  {\r\n                            index++;\r\n                            if(!lecture){\r\n                                console.log(`Have no information about lecture ${lecturesIdsList[index]}`);\r\n                                continue;\r\n                            }\r\n\r\n                            let account_auths = lecture.active.account_auths;\r\n                            if(account_auths.length === 0 || account_auths[0].length === 0)\r\n                                continue;\r\n\r\n                            let potentialTeacherIds = account_auths[0];\r\n                            for(let currentTeacherId of potentialTeacherIds){\r\n                                if(currentTeacherId === cTeacherAccount) {\r\n                                    teachersLecturesList.push({\r\n                                        'id': lecture.id,\r\n                                        'name': lecture.name\r\n                                    });\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if(teachersLecturesList.length === 0){\r\n                            resolve([]);\r\n                            return;\r\n                        }\r\n\r\n\r\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\r\n                    }).catch(reject)\r\n\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport {TeacherApi}","/**\r\n * Created by superpchelka on 24.02.18.\r\n */\r\n\r\nimport StudentApi from './StudentApi';\r\nimport TeacherApi from './TeacherApi';\r\nimport {Api as SchoolApi} from '../api/Api';\r\nimport {generatePrograms} from './ProgramsGenerator'\r\n\r\nclass Api{\r\n\r\n    static programs = [\r\n        {\r\n            command: {\r\n                name: 'setPrivateKey',\r\n                description: 'set private key of current user'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'privateKey',\r\n                    name: '-p, --privateKey <privateKey>',\r\n                    description: 'private key',\r\n                    required: true\r\n                }\r\n            ],\r\n            exec: 'setPrivateKey'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'register',\r\n                description: 'register user by login, password'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'login',\r\n                    name: '-l, --login <login>',\r\n                    description: 'name of the new bitshares account',\r\n                    required: true\r\n                },\r\n                {\r\n                    key: 'password',\r\n                    name: '-p, --password <password>',\r\n                    description: 'password for generating bitshares keys',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'register'\r\n        },\r\n    ];\r\n\r\n    static getPrograms(nodeUrl, login, password, privateKey, onResult){\r\n        return SchoolApi.init(nodeUrl, login, privateKey).then((api)=>{\r\n            if(!privateKey) {\r\n                privateKey = SchoolApi.generateKeys(login, password).privKeys.active;\r\n                api.account.privateKey = privateKey;\r\n            }\r\n\r\n            return [\r\n                ...generatePrograms(Api.programs, api, onResult),\r\n                ...generatePrograms(StudentApi.programs, api.studentApi, onResult),\r\n                ...generatePrograms(TeacherApi.programs, api.teacherApi, onResult),\r\n            ];\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default Api;","/**\r\n * Created by superpchelka on 25.02.18.\r\n */\r\n\r\nimport Program from \"commander\"\r\n\r\nfunction generatePrograms(programsList, api, onResult) {\r\n    let programs = [];\r\n    for(let programData of programsList){\r\n        let program = new Program.Command(programData.command.name);\r\n        program.description(programData.command.description);\r\n        for(let option of programData.options)\r\n            program.option(option.name, option.description);\r\n        program.action(\r\n            (commandName, command)=>{\r\n                if(commandName !== programData.command.name)\r\n                    return;\r\n\r\n                let apiArgs = [];\r\n                for(let option of programData.options) {\r\n                    let optionValue = command[option.key];\r\n                    if((typeof optionValue === 'undefined' || optionValue === null) && option.required){\r\n                        onResult(commandName, `Option ${option.name} is required for method ${commandName}`, true);\r\n                        return;\r\n                    }\r\n                    apiArgs.push(optionValue)\r\n                }\r\n\r\n                api[programData.exec](...apiArgs)\r\n                .then((resp)=>{\r\n                    onResult(commandName, resp, false);\r\n                })\r\n                .catch((error)=>{\r\n                    onResult(commandName, error, true);\r\n                })\r\n            }\r\n        );\r\n\r\n        programs.push(program);\r\n    }\r\n\r\n    return programs;\r\n}\r\n\r\n\r\nexport {generatePrograms};","/**\r\n * Created by superpchelka on 24.02.18.\r\n */\r\n\r\nclass StudentApi{\r\n\r\n    static programs = [\r\n        {\r\n            command: {\r\n                name: 'studentApi.applyForLecture',\r\n                description: 'apply current user for the lecture'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'applyForLecture'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'studentApi.getLectureStats',\r\n                description: 'collect information about lecture'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'getLectureStats'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'studentApi.getLectures',\r\n                description: 'return all available lectures for current user'\r\n            },\r\n            options: [\r\n            ],\r\n            exec: 'getLectures'\r\n        },\r\n    ];\r\n\r\n}\r\n\r\nexport default StudentApi;","/**\r\n * Created by superpchelka on 24.02.18.\r\n */\r\n\r\n\r\nclass TeacherApi{\r\n\r\n    static programs = [\r\n        {\r\n            command: {\r\n                name: 'teacherApi.sendSessionToken',\r\n                description: 'send session token from lecture account to particular student'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n                {\r\n                    key: 'studentAccount',\r\n                    name: '-s, --studentAccount <studentAccount>',\r\n                    description: 'name of the bitshares student account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'sendSessionToken'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'teacherApi.sendGradeToken',\r\n                description: 'send grade token from lecture account to particular student'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n                {\r\n                    key: 'studentAccount',\r\n                    name: '-s, --studentAccount <studentAccount>',\r\n                    description: 'name of the bitshares student account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'sendGradeToken'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'teacherApi.getLectureParticipants',\r\n                description: 'fetch from blockchain information about participants of the lecture'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'getLectureParticipants'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'teacherApi.getLectureApplications',\r\n                description: 'fetch from blockchain information about applications for the lecture'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'getLectureApplications'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'teacherApi.acceptApplication',\r\n                description: 'accept proposal for application for the lecture'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureApplicationId',\r\n                    name: '-i, --lectureApplicationId <lectureApplicationId>',\r\n                    description: 'id of the proposal for application for the lecture',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'acceptApplication'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'teacherApi.getLectureStats',\r\n                description: 'return statistics about particular lecture'\r\n            },\r\n            options: [\r\n                {\r\n                    key: 'lectureAccount',\r\n                    name: '-l, --lectureAccount <lectureAccount>',\r\n                    description: 'name of the bitshares lecture account',\r\n                    required: true\r\n                },\r\n            ],\r\n            exec: 'getLectureStats'\r\n        },\r\n        {\r\n            command: {\r\n                name: 'teacherApi.getLectures',\r\n                description: 'collect all lectures of the current user'\r\n            },\r\n            options: [\r\n            ],\r\n            exec: 'getLectures'\r\n        },\r\n\r\n    ];\r\n\r\n}\r\n\r\nexport default TeacherApi;","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\n\r\nimport {PrivateKey} from \"bitsharesjs\";\r\nimport { encode, decode } from 'bs58';\r\n\r\nclass Account{\r\n\r\n    constructor(account, privateKeyWif){\r\n        this.name=account;\r\n        this.setPrivateKey(privateKeyWif);\r\n    }\r\n\r\n    setPrivateKey(privateKeyWif){\r\n        this.privateKey = privateKeyWif?PrivateKey.fromWif(privateKeyWif):null;\r\n    }\r\n\r\n}\r\n\r\nexport {Account}","/**\r\n * Created by superpchelka on 23.02.18.\r\n */\r\n\r\nlet utSchoolToken = 'UTSCHOOL';\r\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\r\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\r\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\r\n\r\nlet utSchoolAccount='ut-school';\r\nlet utSchoolFaucet = 'u-tech-faucet';\r\nlet utSchoolFaucetAddress = 'https://transnet.tech:10443/api/v1/accounts';\r\n\r\n\r\n\r\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount,\r\n    utSchoolFaucetAddress, utSchoolFaucet}",null]}