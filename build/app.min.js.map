{"version":3,"sources":["obfuscator/beginning.js","cli.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","cli/Api.js","cli/ProgramsGenerator.js","cli/StudentApi.js","cli/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","_commander2","default","version","option","parse","process","argv","password","privateKey","console","log","exit","rl","_readline2","createInterface","input","stdin","output","stdout","prefix","onResult","commandName","resp","isError","_util2","inspect","setPrompt","length","prompt","_Api2","getPrograms","url","login","then","programs","callCommand","inputStr","params","pArgs","concat","_toConsumableArray","processed","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","program","value","name","e","return","Command","action","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","outputHelp","close","on","line","trim","catch","error","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_bitsharesjs","_Configs","_requestPromise","Api","accountName","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","nodeUrl","api","Promise","resolved","rejected","BlockchainApi","init","Login","generateKeys","setPrivateKey","reject","keys","_requestPromise2","method","body","active_key","pubKeys","active","memo_key","memo","owner_key","owner","referrer","json","_bitsharesjsWs","object_type","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","get","operations","operation","op","_fetchHistory","id","opTypeName","account_id","ChainValidation","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","ChainTypes","init_promise","res","all","TransactionBuilder","update_head_block","network_name","_BitsharesApiExtends","_assert","feeAsset","lectureAccount","_assert2","FetchChain","utSchoolTokenTicket","_res","_slicedToArray","cLectureAccount","cStudentAccount","sendAsset","tr","add_type_operation","fee","amount","asset_id","from","to","set_required_fees","propose","fee_paying_account","add_signer","toPublicKey","toPublicKeyString","broadcast","serialize","_this2","schoolTokens","utSchoolTokenSession","utSchoolTokenGrade","_res2","studentAccount","assets","lectureAccountId","studentAccountId","assetsMap","asset","symbol","accepted","balance","getAccountBalance","fetchHistory","transferData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","cUtSchoolAccount","cUtSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lectures","teachersIds","index","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","lectureData","teacher","account_auths","teachers","teachersMap","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectureStatePromiseList","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lecture","teacherData","getLectureStats","lecturesStates","stats","educationToken","cEducationToken","cFeeAsset","_sendToken","tokens","cLectureAccountId","statsMap","tokensIds","map","token","cTicketTokenId","lectureParticipantsIds","indexOf","transferTokenId","accounts","accountsMap","lectureParticipants","accountData","cTicketToken","proposals","applications","cProposals","accountIds","cProposal","Date","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","operationData","accountId","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","application","lectureApplicationId","_res4","cTeacherAccount","proposal","active_approvals_to_add","getLectureParticipants","getLectureApplications","onFinish","_res5","participants","__processLectureQueue","_this4","_res6","cUtSchoolToken","lecturesIdsList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","teachersLecturesList","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","potentialTeacherIds","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_ProgramsGenerator","privKeys","generatePrograms","_StudentApi2","_TeacherApi2","command","description","options","key","required","_commander","programsList","_loop","programData","apiArgs","optionValue","apply","privateKeyWif","PrivateKey","fromWif","utSchoolFaucetAddress","utSchoolFaucet"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport Api from './cli/Api';\nimport Commander from 'commander';\nimport readline from 'readline';\nimport util from \"util\";\n\n\nCommander\n    .version('1.0.0')\n    .option('-l, --login <login>', 'login of your bitshares account')\n    .option('-p, --password  [password]', 'password of your bitshares account')\n    .option('-k, --privateKey [privateKey]', 'private key of your bitshares account')\n    .option('-u, --url <nodeUrl>', 'url of node to connect')\n    .parse(process.argv);\n\nif(!Commander.password && !Commander.privateKey) {\n    console.log(\"Error: you must provide password or privateKey for accessing to your bitshares account\");\n    process.exit();\n}\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\nconst prefix = '>';\nlet onResult = (commandName, resp, isError)=>{\n    console.log(util.inspect(resp, false, null));\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n};\n\nApi.getPrograms(Commander.url, Commander.login, Commander.password, Commander.privateKey, onResult).then((programs)=>{\n\n    programs.push(\n        new Commander.Command('help')\n            .action((commandName)=>{\n                if(commandName !== 'help')\n                    return;\n                for(let program of programs) {\n                    program.outputHelp();\n                    console.log(\"\\n--------------------------\\n\");\n                }\n                onResult(commandName, '', false);\n            })\n    );\n\n    programs.push(\n        new Commander.Command('exit')\n            .action((commandName)=>{\n                if(commandName !== 'exit')\n                    return;\n                rl.close();\n            })\n    );\n\n    function callCommand(programs, inputStr) {\n        let params = inputStr.split(' ');\n        let commandName = params[0];\n        let pArgs = ['', '', ...params];\n\n        let processed = false;\n\n        for(let program of programs) {\n            try{\n                if(commandName===program.name())\n                    processed = true;\n                program.parse(pArgs);\n            }catch(e){\n                console.log(e);\n            }\n        }\n\n        if(!processed)\n            onResult(null, `Unknown command ${commandName}`, true)\n    }\n\n    rl.on('line', (line)=>{\n        callCommand(programs, line.trim());\n    }).on('close', ()=>{\n        process.exit(0);\n    });\n\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n}).catch((error)=>{console.log(error)});\n\n\n\n","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport {Api} from './api/Api'\n\nexport default Api;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Account} from '../common/Account'\nimport {StudentApi} from \"./StudentApi\";\nimport {TeacherApi} from \"./TeacherApi\";\nimport {BlockchainApi} from \"./BlockchainApi\"\nimport {Login} from \"bitsharesjs\";\nimport {utSchoolFaucetAddress, utSchoolFaucet} from \"../common/Configs\";\nimport Request from \"request-promise\";\n\n\nclass Api{\n\n\n    /**\n     * @desc initialize api for interacting with blockchain\n     * @param nodeUrl - url of node for connection\n     * @param accountName - name of bitshares account\n     * @param [privateKey] - private of bitshares account (optional)\n     * @return api object\n     */\n    static init(nodeUrl, accountName, privateKey){\n        let api = new Api(accountName, privateKey);\n        return new Promise((resolved, rejected)=>{\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\n        });\n    }\n\n    /**\n     * @desc generate public keys and private keys by login and password\n     * @param login - login of the bitshares account\n     * @param password - password of the bitshares account\n     * @return Object{\n     *      pubKeys: {active, owner, memo},\n     *      privKeys: {active, owner, memo}\n     * }\n     */\n    static generateKeys(login, password){\n        return Login.generateKeys(login, password)\n    }\n\n    constructor(accountName, privateKey){\n        this.account = new Account(accountName, privateKey);\n        this.studentApi=new StudentApi(this.account);\n        this.teacherApi=new TeacherApi(this.account);\n    }\n\n    /**\n     * @desc set private key of current user\n     * @param privateKey - private key\n     */\n    setPrivateKey(privateKey){\n        this.account.setPrivateKey(privateKey);\n    }\n\n    /**\n     * @desc register user by login, password\n     * @param login - name of the new bitshares account\n     * @param password - password for generating bitshares keys\n     * @return information about created account\n     */\n    register(\n        login,\n        password,\n    ) {\n        return new Promise((resolve, reject) => {\n            let keys = Api.generateKeys(login, password);\n\n            Request(\n                {\n                    method: \"POST\",\n                    url: utSchoolFaucetAddress,\n                    body: {\n                        account: {\n                            active_key: keys.pubKeys.active,\n                            memo_key: keys.pubKeys.memo,\n                            owner_key: keys.pubKeys.owner,\n                            name: login,\n                            referrer: utSchoolFaucet\n                        }\n                    },\n                    json: true\n                }\n            ).then((resp)=>{\n                resolve(resp);\n            }).catch(function (err) {\n                reject(`Faucet ${utSchoolFaucetAddress} failed. ${err}`);\n            });\n        });\n    }\n}\n\nexport {Api}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\nconst {object_type} = ChainTypes;\nlet op_history   = parseInt(object_type.operation_history, 10);\n\n\nclass BitsharesApiExtends{\n\n\n    /**\n     * @desc internal method for iterating through all operations history\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opType - operation type id for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @param operationsList - list of already fetched operations\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     * @private\n     */\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\n        if(typeof stop === 'undefined')\n            stop = \"1.\" + op_history + \".0\";\n        if(typeof start === 'undefined')\n            start = \"1.\" + op_history + \".0\";\n\n        return new Promise( (resolve, reject) => {\n            Apis.instance().history_api().exec(\"get_account_history\",\n                [ account.get(\"id\"), stop, limit, start])\n                .then( operations => {\n                    for(let operation of operations) {\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\n                            operationsList.push(operation);\n                    }\n\n                    if(operations.length == limit)\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\n                    else\n                        resolve(operationsList);\n                });\n        });\n    }\n\n    /**\n     * @desc collect all history of the account\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opTypeName - operation type for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     */\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\n    {\n        // console.log( \"get account history: \", account )\n        /// TODO: make sure we do not submit a query if there is already one\n        /// in flight...\n        let account_id = account;\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\n            account_id = account.get(\"id\");\n\n        if( !ChainValidation.is_object_id(account_id)  )\n            return;\n\n        account = ChainStore.objects_by_id.get(account_id);\n        if( !account ) return;\n\n        let opTypeId = ChainTypes.operations[opTypeName];\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\n            throw new Error(`unknown operation: ${opTypeName}`);\n\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\n    }\n\n\n}\n\nexport {BitsharesApiExtends}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\n\nclass BlockchainApi{\n\n    static init(nodeUrl){\n        return new Promise((resolved, rejected) => {\n            Apis.instance(nodeUrl, true)\n                .init_promise.then((res) => {\n                Promise.all([\n                    new TransactionBuilder().update_head_block(),\n                    ChainStore.init()\n                ]).then(()=>{\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\n                    resolved();\n                }).catch(rejected);\n            }).catch(rejected);\n        });\n    }\n}\n\nexport {BlockchainApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\n\n\nclass StudentApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc apply current user for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return serialized transaction\n     */\n    applyForLecture(lectureAccount){\n        return new Promise((resolve, reject) => {\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, sendAsset, feeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(sendAsset !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n                assert(feeAsset !== null, `Invalid fee asset name ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                });\n\n                tr.set_required_fees().then(()=>{\n                    tr.propose({\n                        fee_paying_account: cStudentAccount.get(\"id\"),\n                    });\n\n                    tr.set_required_fees().then(() => {\n                        tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                        tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n\n\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc collect information about lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\n     * stat: {\n     *      id - id of the token,\n     *      symbol - name of the token\n     *      accepted - use was accepted to lecture\n     *      balance - balance of the particular token on the account\n     * }\n     */\n    getLectureStats(lectureAccount){\n        return new Promise((resolve, reject) => {\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", schoolTokens)\n            ]).then((res)=> {\n                let [cLectureAccount, studentAccount, assets] = res;\n                assets = assets.toJS();\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${cLectureAccount}`);\n                assert(studentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(assets[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\n                assert(assets[1] !== null, `Invalid session token ${schoolTokens[1]}`);\n                assert(assets[2] !== null, `Invalid grade token ${schoolTokens[2]}`);\n\n\n                let lectureAccountId = cLectureAccount.get('id');\n                let studentAccountId = studentAccount.get('id');\n\n                let assetsMap = {};\n                for(let asset of assets)\n                    assetsMap[asset.id] = {\n                        'id': asset.id,\n                        'symbol': asset.symbol,\n                        'accepted': false,\n                        'balance': ChainStore.getAccountBalance(cLectureAccount, asset.id)\n                    };\n\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === lectureAccountId\n                            && transferData.to === studentAccountId\n                            && assetsMap[transferData.amount.asset_id]){\n                            assetsMap[transferData.amount.asset_id].accepted = true;\n                        }\n                    }\n                    resolve(assetsMap);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc return all available lectures for current user\n     * @return list of lectures\n     * lecture: {\n     *      id - id of the bitshares lecture account\n     *      name - name of the bitshares lecture account\n     *      teacher: {\n     *          id - id of the bitshares teacher account\n     *          name - id of the bitshares teacher account\n     *      }\n     *      stats - result from getLectureStats\n     * }\n     */\n    getLectures(){\n        let lecturesList = [];\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cUtSchoolAsset] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cUtSchoolAsset !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cUtSchoolAsset = cUtSchoolAsset.get('id');\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesAccountsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolAsset){\n                            lecturesAccountsList.push(transferData.to);\n                        }\n                    }\n\n                    if(lecturesAccountsList.length === 0) {\n                        resolve(lecturesList);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n                        let teachersIds = [];\n                        let index = -1;\n                        for(let lectureData of lectures){\n                            index++;\n                            if(!lectureData){\n                                console.log(`Have no information about lecture with id ${lecturesAccountsList[index]}`);\n                                continue;\n                            }\n                            lecturesList.push({\n                                'id': lectureData.id,\n                                'name': lectureData.name,\n                                'teacher': {\n                                    'id': lectureData.active.account_auths[0][0]\n                                }\n                            });\n\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\n                        }\n\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\n                            let teachersMap = {};\n                            let index = -1;\n                            teachers = teachers.toJS();\n                            for(let teacher of teachers) {\n                                index++;\n                                if(!teacher){\n                                    console.log(`Have no information about teacher with id ${teachersIds[index]}`);\n                                    continue;\n                                }\n                                teachersMap[teacher.id] = teacher;\n                            }\n\n                            let lectureStatePromiseList = [];\n                            for(let lecture of lecturesList) {\n                                let teacherData = teachersMap[lecture.teacher.id];\n                                if(teacherData)\n                                    lecture.teacher.name = teacherData.name;\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\n                            }\n\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\n                                for(let i=0;i<lecturesList.length;i++)\n                                    lecturesList[i].stats = lecturesStates[i];\n\n                                resolve(lecturesList);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n}\n\nexport {StudentApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\nclass TeacherApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc send education token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @param educationToken - name of the bitshares education token\n     * @return serialized transaction\n     */\n    _sendToken(lectureAccount, studentAccount, educationToken){\n        return new Promise((resolve, reject)=>{\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", studentAccount),\n                FetchChain(\"getAsset\", educationToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, cEducationToken, cFeeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${studentAccount}`);\n                assert(cEducationToken !== null, `Invalid education token ${educationToken}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: cEducationToken.get(\"id\"), amount: 1},\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc send session token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendSessionToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\n    }\n\n    /**\n     * @desc send grade token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendGradeToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\n    }\n\n    /**\n     * @desc fetch from blockchain information about participants of the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of participants\n     * participant: {\n     *      id,\n     *      name\n     * }\n     */\n    getLectureParticipants(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", schoolTokens),\n            ]).then((res)=> {\n                let [cLectureAccount, tokens] = res;\n                tokens = tokens.toJS();\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(tokens[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\n                assert(tokens[1] !== null, `Invalid session token ${schoolTokens[1]}`);\n                assert(tokens[2]!== null, `Invalid grade token ${schoolTokens[2]}`);\n\n                let cLectureAccountId = cLectureAccount.get('id');\n                let statsMap = {};\n                let tokensIds = tokens.map(token=>token.id);\n                let cTicketTokenId = tokens[0].id;\n\n                BitsharesApiExtends.fetchHistory(cLectureAccountId, 100, 'transfer').then((operations)=>{\n                    let lectureParticipantsIds = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === cLectureAccountId) {\n\n                            let index = tokensIds.indexOf(transferData.amount.asset_id);\n                            if (index === -1)\n                                continue;\n\n                            let transferTokenId = transferData.amount.asset_id;\n\n                            if (transferTokenId === cTicketTokenId)\n                                lectureParticipantsIds.push(transferData.to);\n\n                            if (tokensIds.indexOf(transferTokenId) !== -1) {\n                                let stats = statsMap[transferData.to];\n                                if (!stats) {\n                                    statsMap[transferData.to] = stats = {};\n                                    for(let token of tokens){\n                                        stats[token.id] = {\n                                            'id': token.id,\n                                            'symbol': token.symbol,\n                                            'accepted': false\n                                        }\n                                    }\n                                }\n                                stats[transferTokenId]['accepted'] = true;\n                            }\n                        }\n                    }\n\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            if(!account){\n                                console.log(`Have no information about account ${lectureParticipants[index]}`);\n                                continue;\n                            }\n                            accountsMap[account.id] = account;\n                        }\n\n                        let lectureParticipants = [];\n                        for(let participant of lectureParticipantsIds){\n                            let accountData = accountsMap[participant];\n                            if(!accountData)\n                                continue;\n                            lectureParticipants.push({\n                                'id': accountData.id,\n                                'name': accountData.name,\n                                'stats': statsMap[accountData.id]\n                            });\n                        }\n\n                        resolve(lectureParticipants);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc fetch from blockchain information about applications for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of applications\n     * application: {\n     *      id, - id of proposal\n     *      account: { - information about student account requested application\n     *          id,\n     *          name\n     *      }\n     * }\n     */\n    getLectureApplications(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                let lectureAccountId = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n                let proposals = cLectureAccount.toJS().proposals;\n                if(proposals.length == 0){\n                    resolve([]);\n                    return;\n                }\n\n                let applications = [];\n                FetchChain(\"getObject\", proposals).then((cProposals)=>{\n                    cProposals = cProposals.toJS();\n\n                    let accountIds = [];\n                    let index = -1;\n                    for(let cProposal of cProposals){\n                        index++;\n                        if(!cProposal){\n                            console.log(`Have no information about proposal ${proposals[index]}`);\n                            continue;\n                        }\n\n                        if(Date.parse(cProposal.proposed_transaction.expiration) < new Date()/1000)\n                            continue;\n                        let operations = cProposal.proposed_transaction.operations;\n                        let acceptedOperation;\n                        for(let operation of operations){\n                            let operationData = operation[1];\n                            if(operationData.amount.asset_id == cTicketToken\n                                && operationData.from == lectureAccountId\n                            ) {\n                                acceptedOperation = operationData;\n                                break;\n                            }\n                        }\n\n                        if(!acceptedOperation)\n                            continue;\n\n                        accountIds.push(acceptedOperation.to);\n                        applications.push({\n                            'id': cProposal.id,\n                            'operation': acceptedOperation\n                        });\n                    }\n\n                    if(applications.length == 0){\n                        resolve([]);\n                        return;\n                    }\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            let accountId=accountIds[index];\n                            if(!account){\n                                console.log(`Have no information about account ${accountId}`);\n                                account = {id: accountId};\n                            }\n                            accountsMap[accountId] = account;\n                        }\n\n                        for(let application of applications){\n                            let accountData = accountsMap[application.operation.to];\n                            delete application.operation;\n                            application.account = {\n                                'id': accountData.id,\n                                'name': accountData.name\n                            };\n                        }\n\n                        resolve(applications);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc accept proposal for application for the lecture\n     * @param lectureApplicationId - id of the proposal for application for the lecture\n     * @return serialized transaction\n     */\n    acceptApplication(lectureApplicationId){\n        return new Promise((resolve, reject)=>{\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n            Promise.all([\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", this.feeAsset),\n            ]).then((res)=> {\n                let [cTeacherAccount, cFeeAsset, cProposal] = res;\n\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"proposal_update\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    fee_paying_account: cTeacherAccount.get('id'),\n                    proposal: lectureApplicationId,\n                    active_approvals_to_add: [cTeacherAccount.get('id')],\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc return statistics about particular lecture\n     * @param lectureAccount - name of the bitshares lecture accout\n     * @return pair of results from getLectureParticipants and getLectureApplications\n     */\n    getLectureStats(lectureAccount){\n        return Promise.all([\n            this.getLectureParticipants(lectureAccount),\n            this.getLectureApplications(lectureAccount)\n        ])\n    }\n\n    /**\n     * @desc internal method for iterating through lectures and gathering stats\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\n     * @param index - current index in list\n     * @param onFinish - finish callback\n     * @private\n     */\n    __processLectureQueue(lectures, index, onFinish){\n        if(index>=lectures.length) {\n            onFinish(lectures);\n            return;\n        }\n        this.getLectureStats(lectures[index].name).then((res)=>{\n            let [participants, applications] = res;\n            lectures[index].participants = participants;\n            lectures[index].applications = applications;\n\n            this.__processLectureQueue(lectures, index+1, onFinish);\n        })\n    }\n\n    /**\n     * @desc collect all lectures of the current user\n     * @return list of lectures\n     * lecture: {\n     *      id,\n     *      name,\n     *      participants - result of getLectureParticipants\n     *      applications - result of getLectureApplications\n     * }\n     */\n    getLectures(){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cTeacherAccount, cUtSchoolToken] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cUtSchoolToken !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cTeacherAccount = cTeacherAccount.get('id');\n                cUtSchoolToken = cUtSchoolToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesIdsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolToken)\n                            lecturesIdsList.push(transferData.to);\n                    }\n\n                    if(lecturesIdsList.length === 0){\n                        resolve([]);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n\n                        let teachersLecturesList = [];\n\n                        let index = -1;\n                        for(let lecture of lectures)  {\n                            index++;\n                            if(!lecture){\n                                console.log(`Have no information about lecture ${lecturesIdsList[index]}`);\n                                continue;\n                            }\n\n                            let account_auths = lecture.active.account_auths;\n                            if(account_auths.length === 0 || account_auths[0].length === 0)\n                                continue;\n\n                            let potentialTeacherIds = account_auths[0];\n                            for(let currentTeacherId of potentialTeacherIds){\n                                if(currentTeacherId === cTeacherAccount) {\n                                    teachersLecturesList.push({\n                                        'id': lecture.id,\n                                        'name': lecture.name\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n\n                        if(teachersLecturesList.length === 0){\n                            resolve([]);\n                            return;\n                        }\n\n\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\n                    }).catch(reject)\n\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n\n\n\n}\n\nexport {TeacherApi}","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport StudentApi from './StudentApi';\nimport TeacherApi from './TeacherApi';\nimport {Api as SchoolApi} from '../api/Api';\nimport {generatePrograms} from './ProgramsGenerator'\n\nclass Api{\n\n    static programs = [\n        {\n            command: {\n                name: 'setPrivateKey',\n                description: 'set private key of current user'\n            },\n            options: [\n                {\n                    key: 'privateKey',\n                    name: '-p, --privateKey <privateKey>',\n                    description: 'private key',\n                    required: true\n                }\n            ],\n            exec: 'setPrivateKey'\n        },\n        {\n            command: {\n                name: 'register',\n                description: 'register user by login, password'\n            },\n            options: [\n                {\n                    key: 'login',\n                    name: '-l, --login <login>',\n                    description: 'name of the new bitshares account',\n                    required: true\n                },\n                {\n                    key: 'password',\n                    name: '-p, --password <password>',\n                    description: 'password for generating bitshares keys',\n                    required: true\n                },\n            ],\n            exec: 'register'\n        },\n    ];\n\n    static getPrograms(nodeUrl, login, password, privateKey, onResult){\n        return SchoolApi.init(nodeUrl, login, privateKey).then((api)=>{\n            if(!privateKey) {\n                privateKey = SchoolApi.generateKeys(login, password).privKeys.active;\n                api.account.privateKey = privateKey;\n            }\n\n            return [\n                ...generatePrograms(Api.programs, api, onResult),\n                ...generatePrograms(StudentApi.programs, api.studentApi, onResult),\n                ...generatePrograms(TeacherApi.programs, api.teacherApi, onResult),\n            ];\n        });\n    }\n\n}\n\nexport default Api;","/**\n * Created by superpchelka on 25.02.18.\n */\n\nimport Program from \"commander\"\n\nfunction generatePrograms(programsList, api, onResult) {\n    let programs = [];\n    for(let programData of programsList){\n        let program = new Program.Command(programData.command.name);\n        program.description(programData.command.description);\n        for(let option of programData.options)\n            program.option(option.name, option.description);\n        program.action(\n            (commandName, command)=>{\n                if(commandName !== programData.command.name)\n                    return;\n\n                let apiArgs = [];\n                for(let option of programData.options) {\n                    let optionValue = command[option.key];\n                    if((typeof optionValue === 'undefined' || optionValue === null) && option.required){\n                        onResult(commandName, `Option ${option.name} is required for method ${commandName}`, true);\n                        return;\n                    }\n                    apiArgs.push(optionValue)\n                }\n\n                api[programData.exec](...apiArgs)\n                .then((resp)=>{\n                    onResult(commandName, resp, false);\n                })\n                .catch((error)=>{\n                    onResult(commandName, error, true);\n                })\n            }\n        );\n\n        programs.push(program);\n    }\n\n    return programs;\n}\n\n\nexport {generatePrograms};","/**\n * Created by superpchelka on 24.02.18.\n */\n\nclass StudentApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'studentApi.applyForLecture',\n                description: 'apply current user for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'applyForLecture'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectureStats',\n                description: 'collect information about lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectures',\n                description: 'return all available lectures for current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n    ];\n\n}\n\nexport default StudentApi;","/**\n * Created by superpchelka on 24.02.18.\n */\n\n\nclass TeacherApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'teacherApi.sendSessionToken',\n                description: 'send session token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendSessionToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.sendGradeToken',\n                description: 'send grade token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendGradeToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureParticipants',\n                description: 'fetch from blockchain information about participants of the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureParticipants'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureApplications',\n                description: 'fetch from blockchain information about applications for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureApplications'\n        },\n        {\n            command: {\n                name: 'teacherApi.acceptApplication',\n                description: 'accept proposal for application for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureApplicationId',\n                    name: '-i, --lectureApplicationId <lectureApplicationId>',\n                    description: 'id of the proposal for application for the lecture',\n                    required: true\n                },\n            ],\n            exec: 'acceptApplication'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureStats',\n                description: 'return statistics about particular lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectures',\n                description: 'collect all lectures of the current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n\n    ];\n\n}\n\nexport default TeacherApi;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {PrivateKey} from \"bitsharesjs\";\nimport { encode, decode } from 'bs58';\n\nclass Account{\n\n    constructor(account, privateKeyWif){\n        this.name=account;\n        this.setPrivateKey(privateKeyWif);\n    }\n\n    setPrivateKey(privateKeyWif){\n        this.privateKey = privateKeyWif?PrivateKey.fromWif(privateKeyWif):null;\n    }\n\n}\n\nexport {Account}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nlet utSchoolToken = 'UTSCHOOL';\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\n\nlet utSchoolAccount='ut-school';\nlet utSchoolFaucet = 'u-tech-faucet';\nlet utSchoolFaucetAddress = 'https://transnet.tech:10443/api/v1/accounts';\n\n\n\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount,\n    utSchoolFaucetAddress, utSchoolFaucet}",null]}