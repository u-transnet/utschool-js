{"version":3,"sources":["obfuscator/beginning.js","cli.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","cli/Api.js","cli/ProgramsGenerator.js","cli/StudentApi.js","cli/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","_commander2","default","version","option","parse","process","argv","password","privateKey","console","log","exit","rl","_readline2","createInterface","input","stdin","output","stdout","prefix","onResult","commandName","resp","isError","_util2","inspect","setPrompt","length","prompt","_Api2","getPrograms","url","login","then","programs","callCommand","inputStr","params","pArgs","concat","_toConsumableArray","processed","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","program","value","name","e","return","Command","action","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","outputHelp","close","on","line","trim","catch","error","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_assert","_bitsharesjs","_Configs","Api","accountName","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","nodeUrl","api","Promise","resolved","rejected","BlockchainApi","init","Login","generateKeys","ChainValidation","required","utSchoolFaucet","keys","reject","all","FetchChain","res","chain_registrar","_slicedToArray","_assert2","tr","TransactionBuilder","add_type_operation","fee","amount","asset_id","registrar","get","referrer","owner","weight_threshold","account_auths","key_auths","pubKeys","address_auths","active","options","memo_key","memo","voting_account","num_witness","num_committee","votes","set_required_fees","serialize","broadcast","_bitsharesjsWs","object_type","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","operations","operation","op","_fetchHistory","id","opTypeName","account_id","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","ChainTypes","init_promise","update_head_block","network_name","_BitsharesApiExtends","feeAsset","lectureAccount","utSchoolTokenTicket","_res","cLectureAccount","cStudentAccount","sendAsset","from","to","propose","fee_paying_account","add_signer","toPublicKey","toPublicKeyString","_this2","schoolTokens","utSchoolTokenSession","utSchoolTokenGrade","_res2","studentAccount","assets","lectureAccountId","studentAccountId","assetsMap","asset","symbol","accepted","balance","getAccountBalance","fetchHistory","transferData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","cUtSchoolAccount","cUtSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lectures","teachersIds","index","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","lectureData","teacher","teachers","teachersMap","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectureStatePromiseList","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lecture","teacherData","getLectureStats","lecturesStates","stats","educationToken","cEducationToken","cFeeAsset","_sendToken","cTicketToken","lectureParticipantsIds","accounts","accountsMap","lectureParticipants","accountData","proposals","applications","cProposals","accountIds","cProposal","Date","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","operationData","accountId","application","lectureApplicationId","_res4","cTeacherAccount","lectureId","proposal","active_approvals_to_add","getLectureParticipants","getLectureApplications","onFinish","_res5","participants","__processLectureQueue","_this4","_res6","cUtSchoolToken","lecturesIdsList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","teachersLecturesList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","potentialTeacherIds","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_ProgramsGenerator","generatePrograms","_StudentApi2","_TeacherApi2","command","description","key","_commander","programsList","_loop","programData","apiArgs","optionValue","apply","PrivateKey","fromWif"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport Api from './cli/Api';\nimport Commander from 'commander';\nimport readline from 'readline';\nimport util from \"util\";\n\n\nCommander\n    .version('1.0.0')\n    .option('-l, --login <login>', 'login of your bitshares account')\n    .option('-p, --password  [password]', 'password of your bitshares account')\n    .option('-k, --privateKey [privateKey]', 'private key of your bitshares account')\n    .option('-u, --url <nodeUrl>', 'url of node to connect')\n    .parse(process.argv);\n\nif(!Commander.password && !Commander.privateKey) {\n    console.log(\"Error: you must provide password or privateKey for accessing to your bitshares account\");\n    process.exit();\n}\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\nconst prefix = '>';\nlet onResult = (commandName, resp, isError)=>{\n    console.log(util.inspect(resp, false, null));\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n};\n\nApi.getPrograms(Commander.url, Commander.login, Commander.password, Commander.privateKey, onResult).then((programs)=>{\n    //programs.push(Commander);\n\n    programs.push(\n        new Commander.Command('help')\n            .action((commandName)=>{\n                if(commandName !== 'help')\n                    return;\n                for(let program of programs) {\n                    program.outputHelp();\n                    console.log(\"\\n--------------------------\\n\");\n                }\n                onResult(commandName, '', false);\n            })\n    );\n\n    programs.push(\n        new Commander.Command('exit')\n            .action((commandName)=>{\n                if(commandName !== 'exit')\n                    return;\n                rl.close();\n            })\n    );\n\n    function callCommand(programs, inputStr) {\n        let params = inputStr.split(' ');\n        let commandName = params[0];\n        let pArgs = ['', '', ...params];\n\n        let processed = false;\n\n        for(let program of programs) {\n            try{\n                if(commandName===program.name())\n                    processed = true;\n                program.parse(pArgs);\n            }catch(e){\n                console.log(e);\n            }\n        }\n\n        if(!processed)\n            onResult(null, `Unknown command ${commandName}`, true)\n    }\n\n    rl.on('line', (line)=>{\n        callCommand(programs, line.trim());\n    }).on('close', ()=>{\n        process.exit(0);\n    });\n\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n}).catch((error)=>{console.log(error)});\n\n\n\n","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport {Api} from './api/Api'\n\nexport default Api;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Account} from '../common/Account'\nimport {StudentApi} from \"./StudentApi\";\nimport {TeacherApi} from \"./TeacherApi\";\nimport {BlockchainApi} from \"./BlockchainApi\"\nimport assert from \"assert\";\nimport {FetchChain, TransactionBuilder, ChainValidation, Login} from \"bitsharesjs\";\nimport {utSchoolFaucet} from \"../common/Configs\"\n\n\nclass Api{\n\n\n    /**\n     * @desc initialize api for interacting with blockchain\n     * @param nodeUrl - url of node for connection\n     * @param accountName - name of bitshares account\n     * @param [privateKey] - private of bitshares account (optional)\n     * @return api object\n     */\n    static init(nodeUrl, accountName, privateKey){\n        let api = new Api(accountName, privateKey);\n        return new Promise((resolved, rejected)=>{\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\n        });\n    }\n\n    /**\n     * @desc generate public keys and private keys by login and password\n     * @param login - login of the bitshares account\n     * @param password - password of the bitshares account\n     * @return Object{\n     *      pubKeys: {active, owner, memo},\n     *      privKeys: {active, owner, memo}\n     * }\n     */\n    static generateKeys(login, password){\n        return Login.generateKeys(login, password)\n    }\n\n    constructor(accountName, privateKey){\n        this.account = new Account(accountName, privateKey);\n        this.studentApi=new StudentApi(this.account);\n        this.teacherApi=new TeacherApi(this.account);\n    }\n\n    /**\n     * @desc set private key of current user\n     * @param privateKey - private key\n     */\n    setPrivateKey(privateKey){\n        this.account.privateKey = privateKey;\n    }\n\n    /**\n     * @desc register user by login, password\n     * @param login - name of the new bitshares account\n     * @param password - password for generating bitshares keys\n     * @return serialized transaction\n     */\n    register(\n        login,\n        password,\n    ) {\n\n        ChainValidation.required(utSchoolFaucet, \"registrar_id\");\n\n        let keys = Api.generateKeys(login, password);\n\n        return new Promise((resolve, reject) => {\n            return Promise.all([\n                FetchChain(\"getAccount\", utSchoolFaucet),\n            ]).then((res)=> {\n                let [ chain_registrar ] = res;\n\n                assert(chain_registrar, `Invalid faucet account ${utSchoolFaucet}`);\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"account_create\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: 0\n                    },\n                    \"registrar\": chain_registrar.get(\"id\"),\n                    \"referrer\": chain_registrar.get(\"id\"),\n                    \"name\": login,\n                    \"owner\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [],\n                        \"key_auths\": [[ keys.pubKeys.owner, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"active\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [ ],\n                        \"key_auths\": [[ keys.pubKeys.active, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"options\": {\n                        \"memo_key\": keys.pubKeys.memo,\n                        \"voting_account\": \"1.2.5\",\n                        \"num_witness\": 0,\n                        \"num_committee\": 0,\n                        \"votes\": [ ]\n                    }\n                });\n                tr.set_required_fees().then(() => {\n                    console.log(\"serialized transaction:\", tr.serialize());\n                    tr.broadcast();\n                    resolve(tr.serialize());\n                });\n            });\n        });\n    }\n}\n\nexport {Api}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\nconst {object_type} = ChainTypes;\nlet op_history   = parseInt(object_type.operation_history, 10);\n\n\nclass BitsharesApiExtends{\n\n\n    /**\n     * @desc internal method for iterating through all operations history\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opType - operation type id for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @param operationsList - list of already fetched operations\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     * @private\n     */\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\n        if(typeof stop === 'undefined')\n            stop = \"1.\" + op_history + \".0\";\n        if(typeof start === 'undefined')\n            start = \"1.\" + op_history + \".0\";\n\n        return new Promise( (resolve, reject) => {\n            Apis.instance().history_api().exec(\"get_account_history\",\n                [ account.get(\"id\"), stop, limit, start])\n                .then( operations => {\n                    for(let operation of operations) {\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\n                            operationsList.push(operation);\n                    }\n\n                    if(operations.length == limit)\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\n                    else\n                        resolve(operationsList);\n                });\n        });\n    }\n\n    /**\n     * @desc collect all history of the account\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opTypeName - operation type for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     */\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\n    {\n        // console.log( \"get account history: \", account )\n        /// TODO: make sure we do not submit a query if there is already one\n        /// in flight...\n        let account_id = account;\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\n            account_id = account.get(\"id\");\n\n        if( !ChainValidation.is_object_id(account_id)  )\n            return;\n\n        account = ChainStore.objects_by_id.get(account_id);\n        if( !account ) return;\n\n        let opTypeId = ChainTypes.operations[opTypeName];\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\n            throw new Error(`unknown operation: ${opTypeName}`);\n\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\n    }\n\n\n}\n\nexport {BitsharesApiExtends}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\n\nclass BlockchainApi{\n\n    static init(nodeUrl){\n        return new Promise((resolved, rejected) => {\n            Apis.instance(nodeUrl, true)\n                .init_promise.then((res) => {\n                Promise.all([\n                    new TransactionBuilder().update_head_block(),\n                    ChainStore.init()\n                ]).then(()=>{\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\n                    resolved();\n                }).catch(rejected);\n            }).catch(rejected);\n        });\n    }\n}\n\nexport {BlockchainApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\n\n\nclass StudentApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc apply current user for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return serialized transaction\n     */\n    applyForLecture(lectureAccount){\n        return new Promise((resolve, reject) => {\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, sendAsset, feeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(sendAsset !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n                assert(feeAsset !== null, `Invalid fee asset name ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: cLectureAccount.get(\"id\"),\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc collect information about lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\n     * stat: {\n     *      id - id of the token,\n     *      symbol - name of the token\n     *      accepted - use was accepted to lecture\n     *      balance - balance of the particular token on the account\n     * }\n     */\n    getLectureStats(lectureAccount){\n        return new Promise((resolve, reject) => {\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", schoolTokens)\n            ]).then((res)=> {\n                let [cLectureAccount, studentAccount, assets] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${cLectureAccount}`);\n                assert(studentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(assets[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\n                assert(assets[1] !== null, `Invalid session token ${schoolTokens[1]}`);\n                assert(assets[2] !== null, `Invalid grade token ${schoolTokens[2]}`);\n\n\n                let lectureAccountId = cLectureAccount.get('id');\n                let studentAccountId = studentAccount.get('id');\n\n                let assetsMap = {};\n                for(let asset of assets)\n                    assetsMap[asset.get('id')] = {\n                        'id': asset.get('id'),\n                        'symbol': asset.get('symbol'),\n                        'accepted': false,\n                        'balance': ChainStore.getAccountBalance(cLectureAccount, asset.get('id'))\n                    };\n\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === lectureAccountId\n                            && transferData.to === studentAccountId\n                            && assetsMap[transferData.amount.asset_id]){\n                            assetsMap[transferData.amount.asset_id].accepted = true;\n                        }\n                    }\n                    resolve(assetsMap);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc return all available lectures for current user\n     * @return list of lectures\n     * lecture: {\n     *      id - id of the bitshares lecture account\n     *      name - name of the bitshares lecture account\n     *      teacher: {\n     *          id - id of the bitshares teacher account\n     *          name - id of the bitshares teacher account\n     *      }\n     *      stats - result from getLectureStats\n     * }\n     */\n    getLectures(){\n        let lecturesList = [];\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cUtSchoolAsset] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cUtSchoolAsset !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cUtSchoolAsset = cUtSchoolAsset.get('id');\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesAccountsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolAsset){\n                            lecturesAccountsList.push(transferData.to);\n                        }\n                    }\n\n                    if(lecturesAccountsList.length === 0) {\n                        resolve(lecturesList);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n                        let teachersIds = [];\n                        let index = -1;\n                        for(let lectureData of lectures){\n                            index++;\n                            if(!lectureData){\n                                console.log(`Have no information about lecture with id ${lecturesAccountsList[index]}`);\n                                continue;\n                            }\n                            lecturesList.push({\n                                'id': lectureData.id,\n                                'name': lectureData.name,\n                                'teacher': {\n                                    'id': lectureData.active.account_auths[0][0]\n                                }\n                            });\n\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\n                        }\n\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\n                            let teachersMap = {};\n                            let index = -1;\n                            teachers = teachers.toJS();\n                            for(let teacher of teachers) {\n                                index++;\n                                if(!teacher){\n                                    console.log(`Have no information about teacher with id ${teachersIds[index]}`);\n                                    continue;\n                                }\n                                teachersMap[teacher.id] = teacher;\n                            }\n\n                            let lectureStatePromiseList = [];\n                            for(let lecture of lecturesList) {\n                                let teacherData = teachersMap[lecture.teacher.id];\n                                if(teacherData)\n                                    lecture.teacher.name = teacherData.name;\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\n                            }\n\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\n                                for(let i=0;i<lecturesList.length;i++)\n                                    lecturesList[i].stats = lecturesStates[i];\n\n                                resolve(lecturesList);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n}\n\nexport {StudentApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\nclass TeacherApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc send education token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @param educationToken - name of the bitshares education token\n     * @return serialized transaction\n     */\n    _sendToken(lectureAccount, studentAccount, educationToken){\n        return new Promise((resolve, reject)=>{\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", studentAccount),\n                FetchChain(\"getAsset\", educationToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, cEducationToken, cFeeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${studentAccount}`);\n                assert(cEducationToken !== null, `Invalid education token ${educationToken}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: cEducationToken.get(\"id\"), amount: 1},\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc send session token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendSessionToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\n    }\n\n    /**\n     * @desc send grade token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendGradeToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\n    }\n\n    /**\n     * @desc fetch from blockchain information about participants of the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of participants\n     * participant: {\n     *      id,\n     *      name\n     * }\n     */\n    getLectureParticipants(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                cLectureAccount = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cLectureAccount, 100, 'transfer').then((operations)=>{\n                    let lectureParticipantsIds = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == cLectureAccount\n                            && transferData.amount.asset_id == cTicketToken){\n                            lectureParticipantsIds.push(transferData.to);\n                        }\n                    }\n\n\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            if(!account){\n                                console.log(`Have no information about account ${lectureParticipants[index]}`);\n                                continue;\n                            }\n                            accountsMap[account.id] = account;\n                        }\n\n                        let lectureParticipants = [];\n                        for(let participant of lectureParticipantsIds){\n                            let accountData = accountsMap[participant];\n                            if(!accountData)\n                                continue;\n                            lectureParticipants.push({\n                                'id': accountData.id,\n                                'name': accountData.name\n                            });\n                        }\n\n                        resolve(lectureParticipants);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc fetch from blockchain information about applications for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of applications\n     * application: {\n     *      id, - id of proposal\n     *      account: { - information about student account requested application\n     *          id,\n     *          name\n     *      }\n     * }\n     */\n    getLectureApplications(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                let lectureAccountId = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n                let proposals = cLectureAccount.toJS().proposals;\n                if(proposals.length == 0){\n                    resolve([]);\n                    return;\n                }\n\n                let applications = [];\n                FetchChain(\"getObject\", proposals).then((cProposals)=>{\n                    cProposals = cProposals.toJS();\n\n                    let accountIds = [];\n                    let index = -1;\n                    for(let cProposal of cProposals){\n                        index++;\n                        if(!cProposal){\n                            console.log(`Have no information about proposal ${proposals[index]}`);\n                            continue;\n                        }\n\n                        if(Date.parse(cProposal.proposed_transaction.expiration) < new Date()/1000)\n                            continue;\n                        let operations = cProposal.proposed_transaction.operations;\n                        let acceptedOperation;\n                        for(let operation of operations){\n                            let operationData = operation[1];\n                            if(operationData.amount.asset_id == cTicketToken\n                                && operationData.from == lectureAccountId\n                            ) {\n                                acceptedOperation = operationData;\n                                break;\n                            }\n                        }\n\n                        if(!acceptedOperation)\n                            continue;\n\n                        accountIds.push(acceptedOperation.to);\n                        applications.push({\n                            'id': cProposal.id,\n                            'operation': acceptedOperation\n                        });\n                    }\n\n                    if(applications.length == 0){\n                        resolve([]);\n                        return;\n                    }\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            let accountId=accountIds[index];\n                            if(!account){\n                                console.log(`Have no information about account ${accountId}`);\n                                account = {id: accountId};\n                            }\n                            accountsMap[accountId] = account;\n                        }\n\n                        for(let application of applications){\n                            let accountData = accountsMap[application.operation.to];\n                            delete application.operation;\n                            application.account = {\n                                'id': accountData.id,\n                                'name': accountData.name\n                            };\n                        }\n\n                        resolve(applications);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc accept proposal for application for the lecture\n     * @param lectureApplicationId - id of the proposal for application for the lecture\n     * @return serialized transaction\n     */\n    acceptApplication(lectureApplicationId){\n        return new Promise((resolve, reject)=>{\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n            Promise.all([\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", this.feeAsset),\n                FetchChain(\"getObject\", lectureApplicationId)\n            ]).then((res)=> {\n                let [cTeacherAccount, cFeeAsset, cProposal] = res;\n\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n                assert(cProposal !== null, `Invalid proposal id ${lectureApplicationId}`);\n\n                let operations = cProposal.proposed_transaction.operations;\n                let lectureId = operations[0][1].from;\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"proposal_update\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    fee_paying_account: lectureId,\n                    proposal: lectureApplicationId,\n                    active_approvals_to_add: [cTeacherAccount.get('id')],\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc return statistics about particular lecture\n     * @param lectureAccount - name of the bitshares lecture accout\n     * @return pair of results from getLectureParticipants and getLectureApplications\n     */\n    getLectureStats(lectureAccount){\n        return Promise.all([\n            this.getLectureParticipants(lectureAccount),\n            this.getLectureApplications(lectureAccount)\n        ])\n    }\n\n    /**\n     * @desc internal method for iterating through lectures and gathering stats\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\n     * @param index - current index in list\n     * @param onFinish - finish callback\n     * @private\n     */\n    __processLectureQueue(lectures, index, onFinish){\n        if(index>=lectures.length) {\n            onFinish(lectures);\n            return;\n        }\n        this.getLectureStats(lectures[index].name).then((res)=>{\n            let [participants, applications] = res;\n            lectures[index].participants = participants;\n            lectures[index].applications = applications;\n\n            this.__processLectureQueue(lectures, index+1, onFinish);\n        })\n    }\n\n    /**\n     * @desc collect all lectures of the current user\n     * @return list of lectures\n     * lecture: {\n     *      id,\n     *      name,\n     *      participants - result of getLectureParticipants\n     *      applications - result of getLectureApplications\n     * }\n     */\n    getLectures(){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cTeacherAccount, cUtSchoolToken] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cUtSchoolToken !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cTeacherAccount = cTeacherAccount.get('id');\n                cUtSchoolToken = cUtSchoolToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesIdsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolToken)\n                            lecturesIdsList.push(transferData.to);\n                    }\n\n                    if(lecturesIdsList.length === 0){\n                        resolve([]);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n\n                        let teachersLecturesList = [];\n\n                        let index = -1;\n                        for(let lecture of lectures)  {\n                            index++;\n                            if(!lecture){\n                                console.log(`Have no information about lecture ${lecturesIdsList[index]}`);\n                                continue;\n                            }\n\n                            let account_auths = lecture.active.account_auths;\n                            if(account_auths.length === 0 || account_auths[0].length === 0)\n                                continue;\n\n                            let potentialTeacherIds = account_auths[0];\n                            for(let currentTeacherId of potentialTeacherIds){\n                                if(currentTeacherId === cTeacherAccount) {\n                                    teachersLecturesList.push({\n                                        'id': lecture.id,\n                                        'name': lecture.name\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n\n                        if(teachersLecturesList.length === 0){\n                            resolve([]);\n                            return;\n                        }\n\n\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\n                    }).catch(reject)\n\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n\n\n\n}\n\nexport {TeacherApi}","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport StudentApi from './StudentApi';\nimport TeacherApi from './TeacherApi';\nimport {Api as SchoolApi} from '../api/Api';\nimport {generatePrograms} from './ProgramsGenerator'\n\nclass Api{\n\n    static programs = [\n        {\n            command: {\n                name: 'setPrivateKey',\n                description: 'set private key of current user'\n            },\n            options: [\n                {\n                    key: 'privateKey',\n                    name: '-p, --privateKey <privateKey>',\n                    description: 'private key',\n                    required: true\n                }\n            ],\n            exec: 'setPrivateKey'\n        },\n        {\n            command: {\n                name: 'register',\n                description: 'register user by login, password'\n            },\n            options: [\n                {\n                    key: 'login',\n                    name: '-l, --login <login>',\n                    description: 'name of the new bitshares account',\n                    required: true\n                },\n                {\n                    key: 'password',\n                    name: '-p, --password <password>',\n                    description: 'password for generating bitshares keys',\n                    required: true\n                },\n            ],\n            exec: 'register'\n        },\n    ];\n\n    static getPrograms(nodeUrl, login, password, privateKey, onResult){\n        return SchoolApi.init(nodeUrl, login, privateKey).then((api)=>{\n            if(!privateKey)\n                privateKey = SchoolApi.generateKeys(login, password).pubKeys.active;\n\n            return [\n                ...generatePrograms(Api.programs, api, onResult),\n                ...generatePrograms(StudentApi.programs, api.studentApi, onResult),\n                ...generatePrograms(TeacherApi.programs, api.teacherApi, onResult),\n            ];\n        });\n    }\n\n}\n\nexport default Api;","/**\n * Created by superpchelka on 25.02.18.\n */\n\nimport Program from \"commander\"\n\nfunction generatePrograms(programsList, api, onResult) {\n    let programs = [];\n    for(let programData of programsList){\n        let program = new Program.Command(programData.command.name);\n        program.description(programData.command.description);\n        for(let option of programData.options)\n            program.option(option.name, option.description);\n        program.action(\n            (commandName, command)=>{\n                if(commandName !== programData.command.name)\n                    return;\n\n                let apiArgs = [];\n                for(let option of programData.options) {\n                    let optionValue = command[option.key];\n                    if((typeof optionValue === 'undefined' || optionValue === null) && option.required){\n                        onResult(commandName, `Option ${option.name} is required for method ${commandName}`, true);\n                        return;\n                    }\n                    apiArgs.push(optionValue)\n                }\n\n                api[programData.exec](...apiArgs)\n                .then((resp)=>{\n                    onResult(commandName, resp, false);\n                })\n                .catch((error)=>{\n                    onResult(commandName, error, true);\n                })\n            }\n        );\n\n        programs.push(program);\n    }\n\n    return programs;\n}\n\n\nexport {generatePrograms};","/**\n * Created by superpchelka on 24.02.18.\n */\n\nclass StudentApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'studentApi.applyForLecture',\n                description: 'apply current user for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'applyForLecture'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectureStats',\n                description: 'collect information about lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectures',\n                description: 'return all available lectures for current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n    ];\n\n}\n\nexport default StudentApi;","/**\n * Created by superpchelka on 24.02.18.\n */\n\n\nclass TeacherApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'teacherApi.sendSessionToken',\n                description: 'send session token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendSessionToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.sendGradeToken',\n                description: 'send grade token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendGradeToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureParticipants',\n                description: 'fetch from blockchain information about participants of the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureParticipants'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureApplications',\n                description: 'fetch from blockchain information about applications for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureApplications'\n        },\n        {\n            command: {\n                name: 'teacherApi.acceptApplication',\n                description: 'accept proposal for application for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureApplicationId',\n                    name: '-i, --lectureApplicationId <lectureApplicationId>',\n                    description: 'id of the proposal for application for the lecture',\n                    required: true\n                },\n            ],\n            exec: 'acceptApplication'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureStats',\n                description: 'return statistics about particular lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectures',\n                description: 'collect all lectures of the current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n\n    ];\n\n}\n\nexport default TeacherApi;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {PrivateKey} from \"bitsharesjs\";\n\nclass Account{\n\n    constructor(account, privateKey){\n        this.name=account;\n        this.privateKey=privateKey?PrivateKey.fromWif(privateKey):null;\n    }\n\n}\n\nexport {Account}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nlet utSchoolToken = 'UTSCHOOL';\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\n\nlet utSchoolAccount='ut-school';\nlet utSchoolFaucet='u-tech-faucet';\n\n\n\n\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount, utSchoolFaucet}",null]}