{"version":3,"sources":["obfuscator/beginning.js","cli.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","cli/Api.js","cli/ProgramsGenerator.js","cli/StudentApi.js","cli/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","_commander2","default","version","option","parse","process","argv","password","privateKey","console","log","exit","rl","_readline2","createInterface","input","stdin","output","stdout","prefix","_Api2","getPrograms","url","login","commandName","resp","isError","_util2","inspect","setPrompt","length","prompt","then","programs","Command","action","close","on","line","inputStr","params","pArgs","processed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","program","value","name","e","return","callCommand","trim","catch","error","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_assert","_bitsharesjs","_Configs","Api","accountName","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","nodeUrl","api","Promise","resolved","rejected","BlockchainApi","init","Login","generateKeys","ChainValidation","required","utSchoolFaucet","keys","reject","all","FetchChain","res","chain_registrar","_slicedToArray","_assert2","tr","TransactionBuilder","add_type_operation","fee","amount","asset_id","registrar","get","referrer","owner","weight_threshold","account_auths","key_auths","pubKeys","address_auths","active","options","memo_key","memo","voting_account","num_witness","num_committee","votes","set_required_fees","serialize","broadcast","_bitsharesjsWs","object_type","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","operations","operation","op","_fetchHistory","id","opTypeName","account_id","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","ChainTypes","init_promise","update_head_block","network_name","_BitsharesApiExtends","feeAsset","lectureAccount","utSchoolTokenTicket","_res","cLectureAccount","cStudentAccount","sendAsset","from","to","propose","fee_paying_account","add_signer","toPublicKey","toPublicKeyString","_this2","schoolTokens","utSchoolTokenSession","utSchoolTokenGrade","_res2","studentAccount","assets","lectureAccountId","studentAccountId","assetsMap","asset","symbol","accepted","balance","getAccountBalance","fetchHistory","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","transferData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","cUtSchoolAccount","cUtSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lectures","teachersIds","index","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","lectureData","teacher","teachers","teachersMap","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectureStatePromiseList","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lecture","teacherData","getLectureStats","lecturesStates","stats","educationToken","cEducationToken","cFeeAsset","_sendToken","cTicketToken","lectureParticipantsIds","accounts","accountsMap","lectureParticipants","accountData","proposals","applications","cProposals","accountIds","cProposal","Date","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","operationData","accountId","application","lectureApplicationId","_res4","teacherAccount","proposal","active_approvals_to_add","getLectureParticipants","getLectureApplications","onFinish","_res5","participants","__processLectureQueue","_this4","_res6","cTeacherAccount","cUtSchoolToken","lecturesIdsList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","teachersLecturesList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","potentialTeacherIds","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_ProgramsGenerator","onResult","generatePrograms","_toConsumableArray","_StudentApi2","_TeacherApi2","outputHelp","command","description","key","_commander","programsList","_loop","programData","apiArgs","optionValue","apply","PrivateKey","fromWif"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport Api from './cli/Api';\nimport Commander from 'commander';\nimport readline from 'readline';\nimport util from \"util\";\n\n\nCommander\n    .version('1.0.0')\n    .option('-l, --login <login>', 'login of your bitshares account')\n    .option('-p, --password  [password]', 'password of your bitshares account')\n    .option('-k, --privateKey [privateKey]', 'private key of your bitshares account')\n    .option('-u, --url <nodeUrl>', 'url of node to connect')\n    .parse(process.argv);\n\nif(!Commander.password && !Commander.privateKey) {\n    console.log(\"Error: you must provide password or privateKey for accessing to your bitshares account\");\n    process.exit();\n}\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\nconst prefix = '>';\n\nApi.getPrograms(Commander.url, Commander.login, Commander.password, Commander.privateKey, (commandName, resp, isError)=>{\n    console.log(util.inspect(resp, false, null));\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n}).then((programs)=>{\n\n    let exitCommand = new Commander.Command('exit')\n        .action(()=>{\n            rl.close();\n        });\n\n    function callCommand(programs, inputStr) {\n        let params = inputStr.split(' ');\n        let commandName = params[0];\n        let pArgs = ['', '', params];\n\n        let processed = false;\n\n        for(let program of programs) {\n            try{\n                if(commandName===program.name())\n                    processed = true;\n                program.parse(pArgs);\n            }catch(e){\n                console.log(e);\n            }\n        }\n\n        if(!processed)\n            console.log(`Unknow command ${commandName}`);\n    }\n\n    rl.on('line', (line)=>{\n        callCommand(programs, line.trim());\n    }).on('close', ()=>{\n        process.exit(0);\n    });\n\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n}).catch((error)=>{console.log(error)});\n\n\n\n","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport {Api} from './api/Api'\n\nexport default Api;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Account} from '../common/Account'\nimport {StudentApi} from \"./StudentApi\";\nimport {TeacherApi} from \"./TeacherApi\";\nimport {BlockchainApi} from \"./BlockchainApi\"\nimport assert from \"assert\";\nimport {FetchChain, TransactionBuilder, ChainValidation, Login} from \"bitsharesjs\";\nimport {utSchoolFaucet} from \"../common/Configs\"\n\n\nclass Api{\n\n\n    /**\n     * @desc initialize api for interacting with blockchain\n     * @param nodeUrl - url of node for connection\n     * @param accountName - name of bitshares account\n     * @param [privateKey] - private of bitshares account (optional)\n     * @return api object\n     */\n    static init(nodeUrl, accountName, privateKey){\n        let api = new Api(accountName, privateKey);\n        return new Promise((resolved, rejected)=>{\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\n        });\n    }\n\n    /**\n     * @desc generate public keys and private keys by login and password\n     * @param login - login of the bitshares account\n     * @param password - password of the bitshares account\n     * @return Object{\n     *      pubKeys: {active, owner, memo},\n     *      privKeys: {active, owner, memo}\n     * }\n     */\n    static generateKeys(login, password){\n        return Login.generateKeys(login, password)\n    }\n\n    constructor(accountName, privateKey){\n        this.account = new Account(accountName, privateKey);\n        this.studentApi=new StudentApi(this.account);\n        this.teacherApi=new TeacherApi(this.account);\n    }\n\n    /**\n     * @desc set private key of current user\n     * @param privateKey - private key\n     */\n    setPrivateKey(privateKey){\n        this.account.privateKey = privateKey;\n    }\n\n    /**\n     * @desc register user by login, password\n     * @param login - name of the new bitshares account\n     * @param password - password for generating bitshares keys\n     * @return serialized transaction\n     */\n    register(\n        login,\n        password,\n    ) {\n\n        ChainValidation.required(utSchoolFaucet, \"registrar_id\");\n\n        let keys = Api.generateKeys(login, password);\n\n        return new Promise((resolve, reject) => {\n            return Promise.all([\n                FetchChain(\"getAccount\", utSchoolFaucet),\n            ]).then((res)=> {\n                let [ chain_registrar ] = res;\n\n                assert(chain_registrar, `Invalid faucet account ${utSchoolFaucet}`);\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"account_create\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: 0\n                    },\n                    \"registrar\": chain_registrar.get(\"id\"),\n                    \"referrer\": chain_registrar.get(\"id\"),\n                    \"name\": login,\n                    \"owner\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [],\n                        \"key_auths\": [[ keys.pubKeys.owner, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"active\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [ ],\n                        \"key_auths\": [[ keys.pubKeys.active, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"options\": {\n                        \"memo_key\": keys.pubKeys.memo,\n                        \"voting_account\": \"1.2.5\",\n                        \"num_witness\": 0,\n                        \"num_committee\": 0,\n                        \"votes\": [ ]\n                    }\n                });\n                tr.set_required_fees().then(() => {\n                    console.log(\"serialized transaction:\", tr.serialize());\n                    tr.broadcast();\n                    resolve(tr.serialize());\n                });\n            });\n        });\n    }\n}\n\nexport {Api}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\nconst {object_type} = ChainTypes;\nlet op_history   = parseInt(object_type.operation_history, 10);\n\n\nclass BitsharesApiExtends{\n\n\n    /**\n     * @desc internal method for iterating through all operations history\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opType - operation type id for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @param operationsList - list of already fetched operations\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     * @private\n     */\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\n        if(typeof stop === 'undefined')\n            stop = \"1.\" + op_history + \".0\";\n        if(typeof start === 'undefined')\n            start = \"1.\" + op_history + \".0\";\n\n        return new Promise( (resolve, reject) => {\n            Apis.instance().history_api().exec(\"get_account_history\",\n                [ account.get(\"id\"), stop, limit, start])\n                .then( operations => {\n                    for(let operation of operations) {\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\n                            operationsList.push(operation);\n                    }\n\n                    if(operations.length == limit)\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\n                    else\n                        resolve(operationsList);\n                });\n        });\n    }\n\n    /**\n     * @desc collect all history of the account\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opTypeName - operation type for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     */\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\n    {\n        // console.log( \"get account history: \", account )\n        /// TODO: make sure we do not submit a query if there is already one\n        /// in flight...\n        let account_id = account;\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\n            account_id = account.get(\"id\");\n\n        if( !ChainValidation.is_object_id(account_id)  )\n            return;\n\n        account = ChainStore.objects_by_id.get(account_id);\n        if( !account ) return;\n\n        let opTypeId = ChainTypes.operations[opTypeName];\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\n            throw new Error(`unknown operation: ${opTypeName}`);\n\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\n    }\n\n\n}\n\nexport {BitsharesApiExtends}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\n\nclass BlockchainApi{\n\n    static init(nodeUrl){\n        return new Promise((resolved, rejected) => {\n            Apis.instance(nodeUrl, true)\n                .init_promise.then((res) => {\n                Promise.all([\n                    new TransactionBuilder().update_head_block(),\n                    ChainStore.init()\n                ]).then(()=>{\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\n                    resolved();\n                }).catch(rejected);\n            }).catch(rejected);\n        });\n    }\n}\n\nexport {BlockchainApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\n\n\nclass StudentApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc apply current user for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return serialized transaction\n     */\n    applyForLecture(lectureAccount){\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, sendAsset, feeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(sendAsset !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n                assert(feeAsset !== null, `Invalid fee asset name ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: cStudentAccount.get(\"id\"),\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc collect information about lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\n     * stat: {\n     *      id - id of the token,\n     *      symbol - name of the token\n     *      accepted - use was accepted to lecture\n     *      balance - balance of the particular token on the account\n     * }\n     */\n    getLectureStats(lectureAccount){\n        return new Promise((resolve, reject) => {\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", schoolTokens)\n            ]).then((res)=> {\n                let [cLectureAccount, studentAccount, assets] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${cLectureAccount}`);\n                assert(studentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(assets[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\n                assert(assets[1] !== null, `Invalid session token ${schoolTokens[1]}`);\n                assert(assets[2] !== null, `Invalid grade token ${schoolTokens[2]}`);\n\n\n                let lectureAccountId = cLectureAccount.get('id');\n                let studentAccountId = studentAccount.get('id');\n\n                let assetsMap = {};\n                for(let asset of assets)\n                    assetsMap[asset.get('id')] = {\n                        'id': asset.get('id'),\n                        'symbol': asset.get('symbol'),\n                        'accepted': false,\n                        'balance': ChainStore.getAccountBalance(cLectureAccount, asset.get('id'))\n                    };\n\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === lectureAccountId\n                            && transferData.to === studentAccountId\n                            && assetsMap[transferData.amount.asset_id]){\n                            assetsMap[transferData.amount.asset_id].accepted = true;\n                        }\n                    }\n                    resolve(assetsMap);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc return all available lectures for current user\n     * @return list of lectures\n     * lecture: {\n     *      id - id of the bitshares lecture account\n     *      name - name of the bitshares lecture account\n     *      teacher: {\n     *          id - id of the bitshares teacher account\n     *          name - id of the bitshares teacher account\n     *      }\n     *      stats - result from getLectureStats\n     * }\n     */\n    getLectures(){\n        let lecturesList = [];\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cUtSchoolAsset] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cUtSchoolAsset !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cUtSchoolAsset = cUtSchoolAsset.get('id');\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesAccountsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolAsset){\n                            lecturesAccountsList.push(transferData.to);\n                        }\n                    }\n\n                    if(lecturesAccountsList.length === 0) {\n                        resolve(lecturesList);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n                        let teachersIds = [];\n                        let index = -1;\n                        for(let lectureData of lectures){\n                            index++;\n                            if(!lectureData){\n                                console.log(`Have no information about lecture with id ${lecturesAccountsList[index]}`);\n                                continue;\n                            }\n                            lecturesList.push({\n                                'id': lectureData.id,\n                                'name': lectureData.name,\n                                'teacher': {\n                                    'id': lectureData.active.account_auths[0][0]\n                                }\n                            });\n\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\n                        }\n\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\n                            let teachersMap = {};\n                            let index = -1;\n                            teachers = teachers.toJS();\n                            for(let teacher of teachers) {\n                                index++;\n                                if(!teacher){\n                                    console.log(`Have no information about teacher with id ${teachersIds[index]}`);\n                                    continue;\n                                }\n                                teachersMap[teacher.id] = teacher;\n                            }\n\n                            let lectureStatePromiseList = [];\n                            for(let lecture of lecturesList) {\n                                let teacherData = teachersMap[lecture.teacher.id];\n                                if(teacherData)\n                                    lecture.teacher.name = teacherData.name;\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\n                            }\n\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\n                                for(let i=0;i<lecturesList.length;i++)\n                                    lecturesList[i].stats = lecturesStates[i];\n\n                                resolve(lecturesList);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n}\n\nexport {StudentApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\nclass TeacherApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc send education token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @param educationToken - name of the bitshares education token\n     * @return serialized transaction\n     */\n    _sendToken(lectureAccount, studentAccount, educationToken){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", studentAccount),\n                FetchChain(\"getAsset\", educationToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, cEducationToken, cFeeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${studentAccount}`);\n                assert(cEducationToken !== null, `Invalid education token ${educationToken}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: cEducationToken.get(\"id\"), amount: 1},\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc send session token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendSessionToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\n    }\n\n    /**\n     * @desc send grade token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendGradeToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\n    }\n\n    /**\n     * @desc fetch from blockchain information about participants of the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of participants\n     * participant: {\n     *      id,\n     *      name\n     * }\n     */\n    getLectureParticipants(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                cLectureAccount = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cLectureAccount, 100, 'transfer').then((operations)=>{\n                    let lectureParticipantsIds = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == cLectureAccount\n                            && transferData.amount.asset_id == cTicketToken){\n                            lectureParticipantsIds.push(transferData.to);\n                        }\n                    }\n\n\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            if(!account){\n                                console.log(`Have no information about account ${lectureParticipants[index]}`);\n                                continue;\n                            }\n                            accountsMap[account.id] = account;\n                        }\n\n                        let lectureParticipants = [];\n                        for(let participant of lectureParticipantsIds){\n                            let accountData = accountsMap[participant];\n                            if(!accountData)\n                                continue;\n                            lectureParticipants.push({\n                                'id': accountData.id,\n                                'name': accountData.name\n                            });\n                        }\n\n                        resolve(lectureParticipants);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc fetch from blockchain information about applications for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of applications\n     * application: {\n     *      id, - id of proposal\n     *      account: { - information about student account requested application\n     *          id,\n     *          name\n     *      }\n     * }\n     */\n    getLectureApplications(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                let lectureAccountId = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n                let proposals = cLectureAccount.toJS().proposals;\n                if(proposals.length == 0){\n                    resolve([]);\n                    return;\n                }\n\n                let applications = [];\n                FetchChain(\"getObject\", proposals).then((cProposals)=>{\n                    cProposals = cProposals.toJS();\n\n                    let accountIds = [];\n                    let index = -1;\n                    for(let cProposal of cProposals){\n                        index++;\n                        if(!cProposal){\n                            console.log(`Have no information about proposal ${proposals[index]}`);\n                            continue;\n                        }\n\n                        if(Date.parse(cProposal.proposed_transaction.expiration) < new Date()/1000)\n                            continue;\n                        let operations = cProposal.proposed_transaction.operations;\n                        let acceptedOperation;\n                        for(let operation of operations){\n                            let operationData = operation[1];\n                            if(operationData.amount.asset_id == cTicketToken\n                                && operationData.from == lectureAccountId\n                            ) {\n                                acceptedOperation = operationData;\n                                break;\n                            }\n                        }\n\n                        if(!acceptedOperation)\n                            continue;\n\n                        accountIds.push(acceptedOperation.to);\n                        applications.push({\n                            'id': cProposal.id,\n                            'operation': acceptedOperation\n                        });\n                    }\n\n                    if(applications.length == 0){\n                        resolve([]);\n                        return;\n                    }\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            let accountId=accountIds[index];\n                            if(!account){\n                                console.log(`Have no information about account ${accountId}`);\n                                account = {id: accountId};\n                            }\n                            accountsMap[accountId] = account;\n                        }\n\n                        for(let application of applications){\n                            let accountData = accountsMap[application.operation.to];\n                            delete application.operation;\n                            application.account = {\n                                'id': accountData.id,\n                                'name': accountData.name\n                            };\n                        }\n\n                        resolve(applications);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc accept proposal for application for the lecture\n     * @param lectureApplicationId - id of the proposal for application for the lecture\n     * @return serialized transaction\n     */\n    acceptApplication(lectureApplicationId){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [teacherAccount, feeAsset] = res;\n\n                assert(teacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(feeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n                teacherAccount = teacherAccount.get('id');\n\n                tr.add_type_operation(\"proposal_update\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    fee_paying_account: teacherAccount,\n                    proposal: lectureApplicationId,\n                    active_approvals_to_add: [teacherAccount],\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc return statistics about particular lecture\n     * @param lectureAccount - name of the bitshares lecture accout\n     * @return pair of results from getLectureParticipants and getLectureApplications\n     */\n    getLectureStats(lectureAccount){\n        return Promise.all([\n            this.getLectureParticipants(lectureAccount),\n            this.getLectureApplications(lectureAccount)\n        ])\n    }\n\n    /**\n     * @desc internal method for iterating through lectures and gathering stats\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\n     * @param index - current index in list\n     * @param onFinish - finish callback\n     * @private\n     */\n    __processLectureQueue(lectures, index, onFinish){\n        if(index>=lectures.length) {\n            onFinish(lectures);\n            return;\n        }\n        this.getLectureStats(lectures[index].name).then((res)=>{\n            let [participants, applications] = res;\n            lectures[index].participants = participants;\n            lectures[index].applications = applications;\n\n            this.__processLectureQueue(lectures, index+1, onFinish);\n        })\n    }\n\n    /**\n     * @desc collect all lectures of the current user\n     * @return list of lectures\n     * lecture: {\n     *      id,\n     *      name,\n     *      participants - result of getLectureParticipants\n     *      applications - result of getLectureApplications\n     * }\n     */\n    getLectures(){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cTeacherAccount, cUtSchoolToken] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cUtSchoolToken !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cTeacherAccount = cTeacherAccount.get('id');\n                cUtSchoolToken = cUtSchoolToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesIdsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolToken)\n                            lecturesIdsList.push(transferData.to);\n                    }\n\n                    if(lecturesIdsList.length === 0){\n                        resolve([]);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n\n                        let teachersLecturesList = [];\n\n                        let index = -1;\n                        for(let lecture of lectures)  {\n                            index++;\n                            if(!lecture){\n                                console.log(`Have no information about lecture ${lecturesIdsList[index]}`);\n                                continue;\n                            }\n\n                            let account_auths = lecture.active.account_auths;\n                            if(account_auths.length === 0 || account_auths[0].length === 0)\n                                continue;\n\n                            let potentialTeacherIds = account_auths[0];\n                            for(let currentTeacherId of potentialTeacherIds){\n                                if(currentTeacherId === cTeacherAccount) {\n                                    teachersLecturesList.push({\n                                        'id': lecture.id,\n                                        'name': lecture.name\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n\n                        if(teachersLecturesList.length === 0){\n                            resolve([]);\n                            return;\n                        }\n\n\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\n                    }).catch(reject)\n\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n\n\n\n}\n\nexport {TeacherApi}","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport StudentApi from './StudentApi';\nimport TeacherApi from './TeacherApi';\nimport {Api as SchoolApi} from '../api/Api';\nimport {generatePrograms} from './ProgramsGenerator'\nimport Commander from 'commander';\n\nclass Api{\n\n    static programs = [\n        {\n            command: {\n                name: 'setPrivateKey',\n                description: 'set private key of current user'\n            },\n            options: [\n                {\n                    key: 'privateKey',\n                    name: '-p, --privateKey <privateKey>',\n                    description: 'private key',\n                    required: true\n                }\n            ],\n            exec: 'setPrivateKey'\n        },\n        {\n            command: {\n                name: 'register',\n                description: 'register user by login, password'\n            },\n            options: [\n                {\n                    key: 'login',\n                    name: '-l, --login <login>',\n                    description: 'name of the new bitshares account',\n                    required: true\n                },\n                {\n                    key: 'password',\n                    name: '-p, --password <password>',\n                    description: 'password for generating bitshares keys',\n                    required: true\n                },\n            ],\n            exec: 'register'\n        },\n    ];\n\n    static getPrograms(nodeUrl, login, password, privateKey, onResult){\n        return SchoolApi.init(nodeUrl, login, privateKey).then((api)=>{\n            if(!privateKey)\n                privateKey = SchoolApi.generateKeys(login, password).pubKeys.active;\n\n\n            let programs = [\n                ...generatePrograms(Api.programs, api, onResult),\n                ...generatePrograms(StudentApi.programs, api.studentApi, onResult),\n                ...generatePrograms(TeacherApi.programs, api.teacherApi, onResult),\n            ];\n\n            programs.push(new Commander.Command('help')\n                .action(()=>{\n                    for(let program of programs) {\n                        program.outputHelp();\n                        console.log(\"\\n--------------------------\\n\");\n                    }\n                })\n            );\n\n            return programs;\n        });\n    }\n\n}\n\nexport default Api;","/**\n * Created by superpchelka on 25.02.18.\n */\n\nimport Program from \"commander\"\n\nfunction generatePrograms(programsList, api, onResult) {\n    let programs = [];\n    for(let programData of programsList){\n        let program = new Program.Command(programData.command.name);\n        program.description(programData.command.description);\n        for(let option of programData.options)\n            program.option(option.name, option.description);\n        program.action(\n            (commandName, command)=>{\n                if(commandName !== programData.command.name)\n                    return;\n\n                let apiArgs = [];\n                for(let option of programData.options) {\n                    let optionValue = command[option.key];\n                    if((typeof optionValue === 'undefined' || optionValue === null) && option.required){\n                        onResult(commandName, `Option ${option.name} is required for method ${commandName}`, true);\n                        return;\n                    }\n                    apiArgs.push(optionValue)\n                }\n\n                api[programData.exec](...apiArgs)\n                .then((resp)=>{\n                    onResult(commandName, resp, false);\n                })\n                .catch((error)=>{\n                    onResult(commandName, error, true);\n                })\n            }\n        );\n\n        programs.push(program);\n    }\n\n    return programs;\n}\n\n\nexport {generatePrograms};","/**\n * Created by superpchelka on 24.02.18.\n */\n\nclass StudentApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'studentApi.applyForLecture',\n                description: 'apply current user for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'applyForLecture'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectureStats',\n                description: 'collect information about lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectures',\n                description: 'return all available lectures for current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n    ];\n\n}\n\nexport default StudentApi;","/**\n * Created by superpchelka on 24.02.18.\n */\n\n\nclass TeacherApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'teacherApi.sendSessionToken',\n                description: 'send session token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendSessionToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.sendGradeToken',\n                description: 'send grade token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendGradeToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureParticipants',\n                description: 'fetch from blockchain information about participants of the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureParticipants'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureApplications',\n                description: 'fetch from blockchain information about applications for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureApplications'\n        },\n        {\n            command: {\n                name: 'teacherApi.acceptApplication',\n                description: 'accept proposal for application for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureApplicationId',\n                    name: '-i, --lectureApplicationId <lectureApplicationId>',\n                    description: 'id of the proposal for application for the lecture',\n                    required: true\n                },\n            ],\n            exec: 'acceptApplication'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureStats',\n                description: 'return statistics about particular lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectures',\n                description: 'collect all lectures of the current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n\n    ];\n\n}\n\nexport default TeacherApi;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {PrivateKey} from \"bitsharesjs\";\n\nclass Account{\n\n    constructor(account, privateKey){\n        this.name=account;\n        this.privateKey=privateKey?PrivateKey.fromWif(privateKey):'';\n    }\n\n}\n\nexport {Account}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nlet utSchoolToken = 'UTSCHOOL';\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\n\nlet utSchoolAccount='ut-school';\nlet utSchoolFaucet='u-tech-faucet';\n\n\n\n\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount, utSchoolFaucet}",null]}