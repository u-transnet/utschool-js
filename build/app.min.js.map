{"version":3,"sources":["obfuscator/beginning.js","cli.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","cli/Api.js","cli/ProgramsGenerator.js","cli/StudentApi.js","cli/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","_commander2","default","version","option","parse","process","argv","password","privateKey","console","log","exit","rl","_readline2","createInterface","input","stdin","output","stdout","prefix","onResult","commandName","resp","isError","_util2","inspect","setPrompt","length","prompt","_Api2","getPrograms","url","login","then","programs","callCommand","inputStr","params","pArgs","concat","_toConsumableArray","processed","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","program","value","name","e","return","Command","action","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","outputHelp","close","on","line","trim","catch","error","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_bitsharesjs","_Configs","_requestPromise","Api","accountName","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","nodeUrl","api","Promise","resolved","rejected","BlockchainApi","init","Login","generateKeys","reject","keys","_requestPromise2","method","body","active_key","pubKeys","active","memo_key","memo","owner_key","owner","referrer","json","_bitsharesjsWs","object_type","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","get","operations","operation","op","_fetchHistory","id","opTypeName","account_id","ChainValidation","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","ChainTypes","init_promise","res","all","TransactionBuilder","update_head_block","network_name","_BitsharesApiExtends","_assert","feeAsset","lectureAccount","_assert2","FetchChain","utSchoolTokenTicket","_res","_slicedToArray","cLectureAccount","cStudentAccount","sendAsset","tr","add_type_operation","fee","amount","asset_id","from","to","propose","fee_paying_account","set_required_fees","add_signer","toPublicKey","toPublicKeyString","broadcast","serialize","_this2","schoolTokens","utSchoolTokenSession","utSchoolTokenGrade","_res2","studentAccount","assets","lectureAccountId","studentAccountId","assetsMap","asset","symbol","accepted","balance","getAccountBalance","fetchHistory","transferData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","cUtSchoolAccount","cUtSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lectures","teachersIds","index","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","lectureData","teacher","account_auths","teachers","teachersMap","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectureStatePromiseList","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lecture","teacherData","getLectureStats","lecturesStates","stats","educationToken","cEducationToken","cFeeAsset","_sendToken","cTicketToken","lectureParticipantsIds","accounts","accountsMap","lectureParticipants","accountData","proposals","applications","cProposals","accountIds","cProposal","Date","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","operationData","accountId","application","lectureApplicationId","_res4","cTeacherAccount","lectureId","proposal","active_approvals_to_add","getLectureParticipants","getLectureApplications","onFinish","_res5","participants","__processLectureQueue","_this4","_res6","cUtSchoolToken","lecturesIdsList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","teachersLecturesList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","potentialTeacherIds","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_ProgramsGenerator","generatePrograms","_StudentApi2","_TeacherApi2","command","description","options","key","required","_commander","programsList","_loop","programData","apiArgs","optionValue","apply","PrivateKey","fromWif","utSchoolFaucetAddress","utSchoolFaucet"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport Api from './cli/Api';\nimport Commander from 'commander';\nimport readline from 'readline';\nimport util from \"util\";\n\n\nCommander\n    .version('1.0.0')\n    .option('-l, --login <login>', 'login of your bitshares account')\n    .option('-p, --password  [password]', 'password of your bitshares account')\n    .option('-k, --privateKey [privateKey]', 'private key of your bitshares account')\n    .option('-u, --url <nodeUrl>', 'url of node to connect')\n    .parse(process.argv);\n\nif(!Commander.password && !Commander.privateKey) {\n    console.log(\"Error: you must provide password or privateKey for accessing to your bitshares account\");\n    process.exit();\n}\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\nconst prefix = '>';\nlet onResult = (commandName, resp, isError)=>{\n    console.log(util.inspect(resp, false, null));\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n};\n\nApi.getPrograms(Commander.url, Commander.login, Commander.password, Commander.privateKey, onResult).then((programs)=>{\n    //programs.push(Commander);\n\n    programs.push(\n        new Commander.Command('help')\n            .action((commandName)=>{\n                if(commandName !== 'help')\n                    return;\n                for(let program of programs) {\n                    program.outputHelp();\n                    console.log(\"\\n--------------------------\\n\");\n                }\n                onResult(commandName, '', false);\n            })\n    );\n\n    programs.push(\n        new Commander.Command('exit')\n            .action((commandName)=>{\n                if(commandName !== 'exit')\n                    return;\n                rl.close();\n            })\n    );\n\n    function callCommand(programs, inputStr) {\n        let params = inputStr.split(' ');\n        let commandName = params[0];\n        let pArgs = ['', '', ...params];\n\n        let processed = false;\n\n        for(let program of programs) {\n            try{\n                if(commandName===program.name())\n                    processed = true;\n                program.parse(pArgs);\n            }catch(e){\n                console.log(e);\n            }\n        }\n\n        if(!processed)\n            onResult(null, `Unknown command ${commandName}`, true)\n    }\n\n    rl.on('line', (line)=>{\n        callCommand(programs, line.trim());\n    }).on('close', ()=>{\n        process.exit(0);\n    });\n\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n}).catch((error)=>{console.log(error)});\n\n\n\n","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport {Api} from './api/Api'\n\nexport default Api;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Account} from '../common/Account'\nimport {StudentApi} from \"./StudentApi\";\nimport {TeacherApi} from \"./TeacherApi\";\nimport {BlockchainApi} from \"./BlockchainApi\"\nimport {Login} from \"bitsharesjs\";\nimport {utSchoolFaucetAddress, utSchoolFaucet} from \"../common/Configs\";\nimport Request from \"request-promise\";\n\n\nclass Api{\n\n\n    /**\n     * @desc initialize api for interacting with blockchain\n     * @param nodeUrl - url of node for connection\n     * @param accountName - name of bitshares account\n     * @param [privateKey] - private of bitshares account (optional)\n     * @return api object\n     */\n    static init(nodeUrl, accountName, privateKey){\n        let api = new Api(accountName, privateKey);\n        return new Promise((resolved, rejected)=>{\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\n        });\n    }\n\n    /**\n     * @desc generate public keys and private keys by login and password\n     * @param login - login of the bitshares account\n     * @param password - password of the bitshares account\n     * @return Object{\n     *      pubKeys: {active, owner, memo},\n     *      privKeys: {active, owner, memo}\n     * }\n     */\n    static generateKeys(login, password){\n        return Login.generateKeys(login, password)\n    }\n\n    constructor(accountName, privateKey){\n        this.account = new Account(accountName, privateKey);\n        this.studentApi=new StudentApi(this.account);\n        this.teacherApi=new TeacherApi(this.account);\n    }\n\n    /**\n     * @desc set private key of current user\n     * @param privateKey - private key\n     */\n    setPrivateKey(privateKey){\n        this.account.privateKey = privateKey;\n    }\n\n    /**\n     * @desc register user by login, password\n     * @param login - name of the new bitshares account\n     * @param password - password for generating bitshares keys\n     * @return information about created account\n     */\n    register(\n        login,\n        password,\n    ) {\n        return new Promise((resolve, reject) => {\n            let keys = Api.generateKeys(login, password);\n\n            Request(\n                {\n                    method: \"POST\",\n                    url: utSchoolFaucetAddress,\n                    body: {\n                        account: {\n                            active_key: keys.pubKeys.active,\n                            memo_key: keys.pubKeys.memo,\n                            owner_key: keys.pubKeys.owner,\n                            name: login,\n                            referrer: utSchoolFaucet\n                        }\n                    },\n                    json: true\n                }\n            ).then((resp)=>{\n                resolve(resp);\n            }).catch(function (err) {\n                reject(`Faucet ${utSchoolFaucetAddress} failed. ${err}`);\n            });\n        });\n    }\n}\n\nexport {Api}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\nconst {object_type} = ChainTypes;\nlet op_history   = parseInt(object_type.operation_history, 10);\n\n\nclass BitsharesApiExtends{\n\n\n    /**\n     * @desc internal method for iterating through all operations history\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opType - operation type id for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @param operationsList - list of already fetched operations\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     * @private\n     */\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\n        if(typeof stop === 'undefined')\n            stop = \"1.\" + op_history + \".0\";\n        if(typeof start === 'undefined')\n            start = \"1.\" + op_history + \".0\";\n\n        return new Promise( (resolve, reject) => {\n            Apis.instance().history_api().exec(\"get_account_history\",\n                [ account.get(\"id\"), stop, limit, start])\n                .then( operations => {\n                    for(let operation of operations) {\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\n                            operationsList.push(operation);\n                    }\n\n                    if(operations.length == limit)\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\n                    else\n                        resolve(operationsList);\n                });\n        });\n    }\n\n    /**\n     * @desc collect all history of the account\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opTypeName - operation type for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     */\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\n    {\n        // console.log( \"get account history: \", account )\n        /// TODO: make sure we do not submit a query if there is already one\n        /// in flight...\n        let account_id = account;\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\n            account_id = account.get(\"id\");\n\n        if( !ChainValidation.is_object_id(account_id)  )\n            return;\n\n        account = ChainStore.objects_by_id.get(account_id);\n        if( !account ) return;\n\n        let opTypeId = ChainTypes.operations[opTypeName];\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\n            throw new Error(`unknown operation: ${opTypeName}`);\n\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\n    }\n\n\n}\n\nexport {BitsharesApiExtends}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\n\nclass BlockchainApi{\n\n    static init(nodeUrl){\n        return new Promise((resolved, rejected) => {\n            Apis.instance(nodeUrl, true)\n                .init_promise.then((res) => {\n                Promise.all([\n                    new TransactionBuilder().update_head_block(),\n                    ChainStore.init()\n                ]).then(()=>{\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\n                    resolved();\n                }).catch(rejected);\n            }).catch(rejected);\n        });\n    }\n}\n\nexport {BlockchainApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\n\n\nclass StudentApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc apply current user for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return serialized transaction\n     */\n    applyForLecture(lectureAccount){\n        return new Promise((resolve, reject) => {\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, sendAsset, feeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(sendAsset !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n                assert(feeAsset !== null, `Invalid fee asset name ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: cLectureAccount.get(\"id\"),\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc collect information about lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\n     * stat: {\n     *      id - id of the token,\n     *      symbol - name of the token\n     *      accepted - use was accepted to lecture\n     *      balance - balance of the particular token on the account\n     * }\n     */\n    getLectureStats(lectureAccount){\n        return new Promise((resolve, reject) => {\n            let schoolTokens = [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade];\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", schoolTokens)\n            ]).then((res)=> {\n                let [cLectureAccount, studentAccount, assets] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${cLectureAccount}`);\n                assert(studentAccount !== null, `Invalid student account ${this.account.name}`);\n                assert(assets[0] !== null, `Invalid ticket token ${schoolTokens[0]}`);\n                assert(assets[1] !== null, `Invalid session token ${schoolTokens[1]}`);\n                assert(assets[2] !== null, `Invalid grade token ${schoolTokens[2]}`);\n\n\n                let lectureAccountId = cLectureAccount.get('id');\n                let studentAccountId = studentAccount.get('id');\n\n                let assetsMap = {};\n                for(let asset of assets)\n                    assetsMap[asset.get('id')] = {\n                        'id': asset.get('id'),\n                        'symbol': asset.get('symbol'),\n                        'accepted': false,\n                        'balance': ChainStore.getAccountBalance(cLectureAccount, asset.get('id'))\n                    };\n\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === lectureAccountId\n                            && transferData.to === studentAccountId\n                            && assetsMap[transferData.amount.asset_id]){\n                            assetsMap[transferData.amount.asset_id].accepted = true;\n                        }\n                    }\n                    resolve(assetsMap);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc return all available lectures for current user\n     * @return list of lectures\n     * lecture: {\n     *      id - id of the bitshares lecture account\n     *      name - name of the bitshares lecture account\n     *      teacher: {\n     *          id - id of the bitshares teacher account\n     *          name - id of the bitshares teacher account\n     *      }\n     *      stats - result from getLectureStats\n     * }\n     */\n    getLectures(){\n        let lecturesList = [];\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cUtSchoolAsset] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cUtSchoolAsset !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cUtSchoolAsset = cUtSchoolAsset.get('id');\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesAccountsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolAsset){\n                            lecturesAccountsList.push(transferData.to);\n                        }\n                    }\n\n                    if(lecturesAccountsList.length === 0) {\n                        resolve(lecturesList);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n                        let teachersIds = [];\n                        let index = -1;\n                        for(let lectureData of lectures){\n                            index++;\n                            if(!lectureData){\n                                console.log(`Have no information about lecture with id ${lecturesAccountsList[index]}`);\n                                continue;\n                            }\n                            lecturesList.push({\n                                'id': lectureData.id,\n                                'name': lectureData.name,\n                                'teacher': {\n                                    'id': lectureData.active.account_auths[0][0]\n                                }\n                            });\n\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\n                        }\n\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\n                            let teachersMap = {};\n                            let index = -1;\n                            teachers = teachers.toJS();\n                            for(let teacher of teachers) {\n                                index++;\n                                if(!teacher){\n                                    console.log(`Have no information about teacher with id ${teachersIds[index]}`);\n                                    continue;\n                                }\n                                teachersMap[teacher.id] = teacher;\n                            }\n\n                            let lectureStatePromiseList = [];\n                            for(let lecture of lecturesList) {\n                                let teacherData = teachersMap[lecture.teacher.id];\n                                if(teacherData)\n                                    lecture.teacher.name = teacherData.name;\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\n                            }\n\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\n                                for(let i=0;i<lecturesList.length;i++)\n                                    lecturesList[i].stats = lecturesStates[i];\n\n                                resolve(lecturesList);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n}\n\nexport {StudentApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\nimport assert from \"assert\";\n\nclass TeacherApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc send education token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @param educationToken - name of the bitshares education token\n     * @return serialized transaction\n     */\n    _sendToken(lectureAccount, studentAccount, educationToken){\n        return new Promise((resolve, reject)=>{\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", studentAccount),\n                FetchChain(\"getAsset\", educationToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [cLectureAccount, cStudentAccount, cEducationToken, cFeeAsset] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cStudentAccount !== null, `Invalid student account ${studentAccount}`);\n                assert(cEducationToken !== null, `Invalid education token ${educationToken}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    from: cLectureAccount.get(\"id\"),\n                    to: cStudentAccount.get(\"id\"),\n                    amount: { asset_id: cEducationToken.get(\"id\"), amount: 1},\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc send session token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendSessionToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\n    }\n\n    /**\n     * @desc send grade token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendGradeToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\n    }\n\n    /**\n     * @desc fetch from blockchain information about participants of the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of participants\n     * participant: {\n     *      id,\n     *      name\n     * }\n     */\n    getLectureParticipants(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                cLectureAccount = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cLectureAccount, 100, 'transfer').then((operations)=>{\n                    let lectureParticipantsIds = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == cLectureAccount\n                            && transferData.amount.asset_id == cTicketToken){\n                            lectureParticipantsIds.push(transferData.to);\n                        }\n                    }\n\n\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            if(!account){\n                                console.log(`Have no information about account ${lectureParticipants[index]}`);\n                                continue;\n                            }\n                            accountsMap[account.id] = account;\n                        }\n\n                        let lectureParticipants = [];\n                        for(let participant of lectureParticipantsIds){\n                            let accountData = accountsMap[participant];\n                            if(!accountData)\n                                continue;\n                            lectureParticipants.push({\n                                'id': accountData.id,\n                                'name': accountData.name\n                            });\n                        }\n\n                        resolve(lectureParticipants);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc fetch from blockchain information about applications for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of applications\n     * application: {\n     *      id, - id of proposal\n     *      account: { - information about student account requested application\n     *          id,\n     *          name\n     *      }\n     * }\n     */\n    getLectureApplications(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [cLectureAccount, cTicketToken] = res;\n\n                assert(cLectureAccount !== null, `Invalid lecture account ${lectureAccount}`);\n                assert(cTicketToken !== null, `Invalid ticket token ${utSchoolTokenTicket}`);\n\n                let lectureAccountId = cLectureAccount.get('id');\n                cTicketToken = cTicketToken.get('id');\n\n                let proposals = cLectureAccount.toJS().proposals;\n                if(proposals.length == 0){\n                    resolve([]);\n                    return;\n                }\n\n                let applications = [];\n                FetchChain(\"getObject\", proposals).then((cProposals)=>{\n                    cProposals = cProposals.toJS();\n\n                    let accountIds = [];\n                    let index = -1;\n                    for(let cProposal of cProposals){\n                        index++;\n                        if(!cProposal){\n                            console.log(`Have no information about proposal ${proposals[index]}`);\n                            continue;\n                        }\n\n                        if(Date.parse(cProposal.proposed_transaction.expiration) < new Date()/1000)\n                            continue;\n                        let operations = cProposal.proposed_transaction.operations;\n                        let acceptedOperation;\n                        for(let operation of operations){\n                            let operationData = operation[1];\n                            if(operationData.amount.asset_id == cTicketToken\n                                && operationData.from == lectureAccountId\n                            ) {\n                                acceptedOperation = operationData;\n                                break;\n                            }\n                        }\n\n                        if(!acceptedOperation)\n                            continue;\n\n                        accountIds.push(acceptedOperation.to);\n                        applications.push({\n                            'id': cProposal.id,\n                            'operation': acceptedOperation\n                        });\n                    }\n\n                    if(applications.length == 0){\n                        resolve([]);\n                        return;\n                    }\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        let index = -1;\n                        for(let account of accounts){\n                            index++;\n                            let accountId=accountIds[index];\n                            if(!account){\n                                console.log(`Have no information about account ${accountId}`);\n                                account = {id: accountId};\n                            }\n                            accountsMap[accountId] = account;\n                        }\n\n                        for(let application of applications){\n                            let accountData = accountsMap[application.operation.to];\n                            delete application.operation;\n                            application.account = {\n                                'id': accountData.id,\n                                'name': accountData.name\n                            };\n                        }\n\n                        resolve(applications);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc accept proposal for application for the lecture\n     * @param lectureApplicationId - id of the proposal for application for the lecture\n     * @return serialized transaction\n     */\n    acceptApplication(lectureApplicationId){\n        return new Promise((resolve, reject)=>{\n            assert(this.account.privateKey !== null, `You must provide private key for executing this method`);\n\n            Promise.all([\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", this.feeAsset),\n                FetchChain(\"getObject\", lectureApplicationId)\n            ]).then((res)=> {\n                let [cTeacherAccount, cFeeAsset, cProposal] = res;\n\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cFeeAsset !== null, `Invalid fee asset ${this.feeAsset}`);\n                assert(cProposal !== null, `Invalid proposal id ${lectureApplicationId}`);\n\n                let operations = cProposal.proposed_transaction.operations;\n                let lectureId = operations[0][1].from;\n\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"proposal_update\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: cFeeAsset.get(\"id\")\n                    },\n                    fee_paying_account: lectureId,\n                    proposal: lectureApplicationId,\n                    active_approvals_to_add: [cTeacherAccount.get('id')],\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().then((resp)=>{resolve(tr.serialize())}).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc return statistics about particular lecture\n     * @param lectureAccount - name of the bitshares lecture accout\n     * @return pair of results from getLectureParticipants and getLectureApplications\n     */\n    getLectureStats(lectureAccount){\n        return Promise.all([\n            this.getLectureParticipants(lectureAccount),\n            this.getLectureApplications(lectureAccount)\n        ])\n    }\n\n    /**\n     * @desc internal method for iterating through lectures and gathering stats\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\n     * @param index - current index in list\n     * @param onFinish - finish callback\n     * @private\n     */\n    __processLectureQueue(lectures, index, onFinish){\n        if(index>=lectures.length) {\n            onFinish(lectures);\n            return;\n        }\n        this.getLectureStats(lectures[index].name).then((res)=>{\n            let [participants, applications] = res;\n            lectures[index].participants = participants;\n            lectures[index].applications = applications;\n\n            this.__processLectureQueue(lectures, index+1, onFinish);\n        })\n    }\n\n    /**\n     * @desc collect all lectures of the current user\n     * @return list of lectures\n     * lecture: {\n     *      id,\n     *      name,\n     *      participants - result of getLectureParticipants\n     *      applications - result of getLectureApplications\n     * }\n     */\n    getLectures(){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [cUtSchoolAccount, cTeacherAccount, cUtSchoolToken] = res;\n\n                assert(cUtSchoolAccount !== null, `Invalid utSchoolAccount ${utSchoolAccount}`);\n                assert(cTeacherAccount !== null, `Invalid teacher account ${this.account.name}`);\n                assert(cUtSchoolToken !== null, `Invalid utSchoolToken ${utSchoolToken}`);\n\n\n                cUtSchoolAccount = cUtSchoolAccount.get('id');\n                cTeacherAccount = cTeacherAccount.get('id');\n                cUtSchoolToken = cUtSchoolToken.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(cUtSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesIdsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from === cUtSchoolAccount\n                            && transferData.amount.asset_id === cUtSchoolToken)\n                            lecturesIdsList.push(transferData.to);\n                    }\n\n                    if(lecturesIdsList.length === 0){\n                        resolve([]);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n\n                        let teachersLecturesList = [];\n\n                        let index = -1;\n                        for(let lecture of lectures)  {\n                            index++;\n                            if(!lecture){\n                                console.log(`Have no information about lecture ${lecturesIdsList[index]}`);\n                                continue;\n                            }\n\n                            let account_auths = lecture.active.account_auths;\n                            if(account_auths.length === 0 || account_auths[0].length === 0)\n                                continue;\n\n                            let potentialTeacherIds = account_auths[0];\n                            for(let currentTeacherId of potentialTeacherIds){\n                                if(currentTeacherId === cTeacherAccount) {\n                                    teachersLecturesList.push({\n                                        'id': lecture.id,\n                                        'name': lecture.name\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n\n                        if(teachersLecturesList.length === 0){\n                            resolve([]);\n                            return;\n                        }\n\n\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\n                    }).catch(reject)\n\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n\n\n\n}\n\nexport {TeacherApi}","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport StudentApi from './StudentApi';\nimport TeacherApi from './TeacherApi';\nimport {Api as SchoolApi} from '../api/Api';\nimport {generatePrograms} from './ProgramsGenerator'\n\nclass Api{\n\n    static programs = [\n        {\n            command: {\n                name: 'setPrivateKey',\n                description: 'set private key of current user'\n            },\n            options: [\n                {\n                    key: 'privateKey',\n                    name: '-p, --privateKey <privateKey>',\n                    description: 'private key',\n                    required: true\n                }\n            ],\n            exec: 'setPrivateKey'\n        },\n        {\n            command: {\n                name: 'register',\n                description: 'register user by login, password'\n            },\n            options: [\n                {\n                    key: 'login',\n                    name: '-l, --login <login>',\n                    description: 'name of the new bitshares account',\n                    required: true\n                },\n                {\n                    key: 'password',\n                    name: '-p, --password <password>',\n                    description: 'password for generating bitshares keys',\n                    required: true\n                },\n            ],\n            exec: 'register'\n        },\n    ];\n\n    static getPrograms(nodeUrl, login, password, privateKey, onResult){\n        return SchoolApi.init(nodeUrl, login, privateKey).then((api)=>{\n            if(!privateKey)\n                privateKey = SchoolApi.generateKeys(login, password).pubKeys.active;\n\n            return [\n                ...generatePrograms(Api.programs, api, onResult),\n                ...generatePrograms(StudentApi.programs, api.studentApi, onResult),\n                ...generatePrograms(TeacherApi.programs, api.teacherApi, onResult),\n            ];\n        });\n    }\n\n}\n\nexport default Api;","/**\n * Created by superpchelka on 25.02.18.\n */\n\nimport Program from \"commander\"\n\nfunction generatePrograms(programsList, api, onResult) {\n    let programs = [];\n    for(let programData of programsList){\n        let program = new Program.Command(programData.command.name);\n        program.description(programData.command.description);\n        for(let option of programData.options)\n            program.option(option.name, option.description);\n        program.action(\n            (commandName, command)=>{\n                if(commandName !== programData.command.name)\n                    return;\n\n                let apiArgs = [];\n                for(let option of programData.options) {\n                    let optionValue = command[option.key];\n                    if((typeof optionValue === 'undefined' || optionValue === null) && option.required){\n                        onResult(commandName, `Option ${option.name} is required for method ${commandName}`, true);\n                        return;\n                    }\n                    apiArgs.push(optionValue)\n                }\n\n                api[programData.exec](...apiArgs)\n                .then((resp)=>{\n                    onResult(commandName, resp, false);\n                })\n                .catch((error)=>{\n                    onResult(commandName, error, true);\n                })\n            }\n        );\n\n        programs.push(program);\n    }\n\n    return programs;\n}\n\n\nexport {generatePrograms};","/**\n * Created by superpchelka on 24.02.18.\n */\n\nclass StudentApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'studentApi.applyForLecture',\n                description: 'apply current user for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'applyForLecture'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectureStats',\n                description: 'collect information about lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'studentApi.getLectures',\n                description: 'return all available lectures for current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n    ];\n\n}\n\nexport default StudentApi;","/**\n * Created by superpchelka on 24.02.18.\n */\n\n\nclass TeacherApi{\n\n    static programs = [\n        {\n            command: {\n                name: 'teacherApi.sendSessionToken',\n                description: 'send session token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendSessionToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.sendGradeToken',\n                description: 'send grade token from lecture account to particular student'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n                {\n                    key: 'studentAccount',\n                    name: '-s, --studentAccount <studentAccount>',\n                    description: 'name of the bitshares student account',\n                    required: true\n                },\n            ],\n            exec: 'sendGradeToken'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureParticipants',\n                description: 'fetch from blockchain information about participants of the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureParticipants'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureApplications',\n                description: 'fetch from blockchain information about applications for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureApplications'\n        },\n        {\n            command: {\n                name: 'teacherApi.acceptApplication',\n                description: 'accept proposal for application for the lecture'\n            },\n            options: [\n                {\n                    key: 'lectureApplicationId',\n                    name: '-i, --lectureApplicationId <lectureApplicationId>',\n                    description: 'id of the proposal for application for the lecture',\n                    required: true\n                },\n            ],\n            exec: 'acceptApplication'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectureStats',\n                description: 'return statistics about particular lecture'\n            },\n            options: [\n                {\n                    key: 'lectureAccount',\n                    name: '-l, --lectureAccount <lectureAccount>',\n                    description: 'name of the bitshares lecture account',\n                    required: true\n                },\n            ],\n            exec: 'getLectureStats'\n        },\n        {\n            command: {\n                name: 'teacherApi.getLectures',\n                description: 'collect all lectures of the current user'\n            },\n            options: [\n            ],\n            exec: 'getLectures'\n        },\n\n    ];\n\n}\n\nexport default TeacherApi;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {PrivateKey} from \"bitsharesjs\";\n\nclass Account{\n\n    constructor(account, privateKey){\n        this.name=account;\n        this.privateKey=privateKey?PrivateKey.fromWif(privateKey):null;\n    }\n\n}\n\nexport {Account}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nlet utSchoolToken = 'UTSCHOOL';\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\n\nlet utSchoolAccount='ut-school';\nlet utSchoolFaucet = 'u-tech-faucet';\nlet utSchoolFaucetAddress = 'https://transnet.tech:10443/api/v1/accounts';\n\n\n\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount,\n    utSchoolFaucetAddress, utSchoolFaucet}",null]}